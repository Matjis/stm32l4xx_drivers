
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cdc  08000ce4  00010ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cdc  08000cdc  00010ce4  2**0
                  CONTENTS
  4 .ARM          00000000  08000cdc  08000cdc  00010ce4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cdc  08000ce4  00010ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cdc  08000cdc  00010cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ce0  08000ce0  00010ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ce4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ce4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ce4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a64  00000000  00000000  00010d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000048e  00000000  00000000  00012778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  00012c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  00012d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024f3  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000012eb  00000000  00000000  00015393  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a529  00000000  00000000  0001667e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00020ba7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000050c  00000000  00000000  00020c24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000cc4 	.word	0x08000cc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000cc4 	.word	0x08000cc4

080001c8 <delay>:

// Arduino LED
#define LED_PIN					9


void delay(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<250000; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	0003d08f 	.word	0x0003d08f

080001f4 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001fa:	4b14      	ldr	r3, [pc, #80]	; (800024c <SPI2_GPIOInits+0x58>)
 80001fc:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001fe:	2302      	movs	r3, #2
 8000200:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000202:	2305      	movs	r3, #5
 8000204:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000206:	2302      	movs	r3, #2
 8000208:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]

	// Init SCL - clock pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 10;
 8000212:	230a      	movs	r3, #10
 8000214:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f97f 	bl	800051c <GPIO_Init>

	// Init MISO pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 800021e:	230e      	movs	r3, #14
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f979 	bl	800051c <GPIO_Init>

	// Init MOSI pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 800022a:	230f      	movs	r3, #15
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f973 	bl	800051c <GPIO_Init>

	// Init NSS pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 9;
 8000236:	2309      	movs	r3, #9
 8000238:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f96d 	bl	800051c <GPIO_Init>

}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	48000400 	.word	0x48000400

08000250 <SPI2_Inits>:

void SPI2_Inits(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <SPI2_Inits+0x38>)
 8000258:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800025a:	2301      	movs	r3, #1
 800025c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800025e:	2301      	movs	r3, #1
 8000260:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // main clock is 16MHz, and we want 2MHz
 8000262:	2302      	movs	r3, #2
 8000264:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_CRCL = SPI_CRCN_8BITS;
 8000266:	2300      	movs	r3, #0
 8000268:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026a:	2300      	movs	r3, #0
 800026c:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave managment for NSS enabled
 8000272:	2300      	movs	r3, #0
 8000274:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fbeb 	bl	8000a54 <SPI_Init>
}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40003800 	.word	0x40003800

0800028c <Ext_button_Inits>:

void Ext_button_Inits(){
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioExtButton;

	//external button config
	GpioExtButton.pGPIOx = GPIOA;
 8000292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000296:	607b      	str	r3, [r7, #4]
	GpioExtButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000298:	2307      	movs	r3, #7
 800029a:	723b      	strb	r3, [r7, #8]
	GpioExtButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800029c:	2304      	movs	r3, #4
 800029e:	727b      	strb	r3, [r7, #9]
	GpioExtButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002a0:	2302      	movs	r3, #2
 80002a2:	72bb      	strb	r3, [r7, #10]
	GpioExtButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a4:	2300      	movs	r3, #0
 80002a6:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GpioExtButton);
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f936 	bl	800051c <GPIO_Init>
}
 80002b0:	bf00      	nop
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <Ext_LED_Inits>:


	GPIO_Init(&GpioUserButton);
}

void Ext_LED_Inits(){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed1;

	//led 1 config - A6 built in led for L476xx;
	GpioLed1.pGPIOx = GPIOC;
 80002be:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <Ext_LED_Inits+0x30>)
 80002c0:	607b      	str	r3, [r7, #4]
	GpioLed1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 80002c2:	2308      	movs	r3, #8
 80002c4:	723b      	strb	r3, [r7, #8]
	GpioLed1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002c6:	2301      	movs	r3, #1
 80002c8:	727b      	strb	r3, [r7, #9]
	GpioLed1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002ca:	2302      	movs	r3, #2
 80002cc:	72bb      	strb	r3, [r7, #10]
	GpioLed1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002ce:	2300      	movs	r3, #0
 80002d0:	733b      	strb	r3, [r7, #12]
	GpioLed1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002d2:	2300      	movs	r3, #0
 80002d4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioLed1);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f91f 	bl	800051c <GPIO_Init>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	48000800 	.word	0x48000800

080002ec <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte){
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5 ){
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2bf5      	cmp	r3, #245	; 0xf5
 80002fa:	d101      	bne.n	8000300 <SPI_VerifyResponse+0x14>
		//ack
		return 1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <main>:

int main(){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xff;
 8000316:	23ff      	movs	r3, #255	; 0xff
 8000318:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_read;

	//this function is needed to set up and initialize SPI2 GPIO pins
	SPI2_GPIOInits();
 800031a:	f7ff ff6b 	bl	80001f4 <SPI2_GPIOInits>

	//this function is needed to set up and initialize SPI2 peripheral parameters
	SPI2_Inits();
 800031e:	f7ff ff97 	bl	8000250 <SPI2_Inits>
	 * Setting SSOE = 1 makes NSS output enabled.
	 * The NSS pin is automatically managed by hardware.
	 * SPE = 1 => NSS = 0
	 * SPE = 0 => NSS = 1
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000322:	2101      	movs	r1, #1
 8000324:	482b      	ldr	r0, [pc, #172]	; (80003d4 <main+0xc4>)
 8000326:	f000 fc78 	bl	8000c1a <SPI_SSOEConfig>

	//User_button_Inits();
	Ext_button_Inits();
 800032a:	f7ff ffaf 	bl	800028c <Ext_button_Inits>
	Ext_LED_Inits();
 800032e:	f7ff ffc3 	bl	80002b8 <Ext_LED_Inits>

	while(1){

		while( GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_7) ){
 8000332:	e004      	b.n	800033e <main+0x2e>
			GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NO_8, 1);
 8000334:	2201      	movs	r2, #1
 8000336:	2108      	movs	r1, #8
 8000338:	4827      	ldr	r0, [pc, #156]	; (80003d8 <main+0xc8>)
 800033a:	f000 fb2d 	bl	8000998 <GPIO_WriteToOutputPin>
		while( GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_7) ){
 800033e:	2107      	movs	r1, #7
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f000 fb12 	bl	800096c <GPIO_ReadFromInputPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f2      	bne.n	8000334 <main+0x24>
		}

		GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_NO_8, 0);
 800034e:	2200      	movs	r2, #0
 8000350:	2108      	movs	r1, #8
 8000352:	4821      	ldr	r0, [pc, #132]	; (80003d8 <main+0xc8>)
 8000354:	f000 fb20 	bl	8000998 <GPIO_WriteToOutputPin>

		delay();
 8000358:	f7ff ff36 	bl	80001c8 <delay>

		//enable SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 800035c:	2101      	movs	r1, #1
 800035e:	481d      	ldr	r0, [pc, #116]	; (80003d4 <main+0xc4>)
 8000360:	f000 fc3f 	bl	8000be2 <SPI_PeripheralControl>

	  // 1. CMD_LED_CTRL

		uint8_t commandcode = COMMAND_LED_CTRL;
 8000364:	2350      	movs	r3, #80	; 0x50
 8000366:	717b      	strb	r3, [r7, #5]
		uint8_t ackbyte;
		uint8_t args[2];

		// Send command
		SPI_SendData(SPI2, &commandcode, 1);
 8000368:	1d7b      	adds	r3, r7, #5
 800036a:	2201      	movs	r2, #1
 800036c:	4619      	mov	r1, r3
 800036e:	4819      	ldr	r0, [pc, #100]	; (80003d4 <main+0xc4>)
 8000370:	f000 fbcb 	bl	8000b0a <SPI_SendData>

		// Do dummy read to clear the RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000374:	1dbb      	adds	r3, r7, #6
 8000376:	2201      	movs	r2, #1
 8000378:	4619      	mov	r1, r3
 800037a:	4816      	ldr	r0, [pc, #88]	; (80003d4 <main+0xc4>)
 800037c:	f000 fbfb 	bl	8000b76 <SPI_ReceiveData>

		// send some dummy bits (1 byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write , 1);
 8000380:	1dfb      	adds	r3, r7, #7
 8000382:	2201      	movs	r2, #1
 8000384:	4619      	mov	r1, r3
 8000386:	4813      	ldr	r0, [pc, #76]	; (80003d4 <main+0xc4>)
 8000388:	f000 fbbf 	bl	8000b0a <SPI_SendData>

		SPI_ReceiveData(SPI2, &ackbyte, 1);
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	4810      	ldr	r0, [pc, #64]	; (80003d4 <main+0xc4>)
 8000394:	f000 fbef 	bl	8000b76 <SPI_ReceiveData>

		if (SPI_VerifyResponse(ackbyte) ){
 8000398:	793b      	ldrb	r3, [r7, #4]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ffa6 	bl	80002ec <SPI_VerifyResponse>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d009      	beq.n	80003ba <main+0xaa>

			// Send arguments
			args[0] = LED_PIN;
 80003a6:	2309      	movs	r3, #9
 80003a8:	703b      	strb	r3, [r7, #0]
			args[1] = LED_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	707b      	strb	r3, [r7, #1]
			SPI_SendData(SPI2, args , 2);
 80003ae:	463b      	mov	r3, r7
 80003b0:	2202      	movs	r2, #2
 80003b2:	4619      	mov	r1, r3
 80003b4:	4807      	ldr	r0, [pc, #28]	; (80003d4 <main+0xc4>)
 80003b6:	f000 fba8 	bl	8000b0a <SPI_SendData>
		}

		//confirms SPI is not busy
		while( SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG) );
 80003ba:	bf00      	nop
 80003bc:	2180      	movs	r1, #128	; 0x80
 80003be:	4805      	ldr	r0, [pc, #20]	; (80003d4 <main+0xc4>)
 80003c0:	f000 fc47 	bl	8000c52 <SPI_GetFlagStatus>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1f8      	bne.n	80003bc <main+0xac>

		//disable SPI2 peripheral
		SPI_PeripheralControl(SPI2, DISABLE);
 80003ca:	2100      	movs	r1, #0
 80003cc:	4801      	ldr	r0, [pc, #4]	; (80003d4 <main+0xc4>)
 80003ce:	f000 fc08 	bl	8000be2 <SPI_PeripheralControl>
	while(1){
 80003d2:	e7ae      	b.n	8000332 <main+0x22>
 80003d4:	40003800 	.word	0x40003800
 80003d8:	48000800 	.word	0x48000800

080003dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040a:	f000 fc37 	bl	8000c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ff7f 	bl	8000310 <main>

08000412 <LoopForever>:

LoopForever:
    b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   r0, =_estack
 8000414:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000420:	08000ce4 	.word	0x08000ce4
  ldr r2, =_sbss
 8000424:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000428:	2000001c 	.word	0x2000001c

0800042c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC1_2_IRQHandler>
	...

08000430 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	460b      	mov	r3, r1
 800043a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800043c:	78fb      	ldrb	r3, [r7, #3]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d156      	bne.n	80004f0 <GPIO_PeriClockControl+0xc0>
		if(pGPIOx == GPIOA){
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800044a:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	4a2b      	ldr	r2, [pc, #172]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	64d3      	str	r3, [r2, #76]	; 0x4c
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_EN();
		}
	}
}
 8000456:	e04b      	b.n	80004f0 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOB){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a29      	ldr	r2, [pc, #164]	; (8000500 <GPIO_PeriClockControl+0xd0>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000460:	4b26      	ldr	r3, [pc, #152]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 8000462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000464:	4a25      	ldr	r2, [pc, #148]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 8000466:	f043 0302 	orr.w	r3, r3, #2
 800046a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800046c:	e040      	b.n	80004f0 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOC){
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a24      	ldr	r2, [pc, #144]	; (8000504 <GPIO_PeriClockControl+0xd4>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a20      	ldr	r2, [pc, #128]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000482:	e035      	b.n	80004f0 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOD){
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a20      	ldr	r2, [pc, #128]	; (8000508 <GPIO_PeriClockControl+0xd8>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 800048e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000490:	4a1a      	ldr	r2, [pc, #104]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000498:	e02a      	b.n	80004f0 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOE){
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <GPIO_PeriClockControl+0xdc>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004a2:	4b16      	ldr	r3, [pc, #88]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004a8:	f043 0310 	orr.w	r3, r3, #16
 80004ac:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80004ae:	e01f      	b.n	80004f0 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOF){
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a17      	ldr	r2, [pc, #92]	; (8000510 <GPIO_PeriClockControl+0xe0>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004bc:	4a0f      	ldr	r2, [pc, #60]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004be:	f043 0320 	orr.w	r3, r3, #32
 80004c2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80004c4:	e014      	b.n	80004f0 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOG){
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a12      	ldr	r2, [pc, #72]	; (8000514 <GPIO_PeriClockControl+0xe4>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004d8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80004da:	e009      	b.n	80004f0 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOH){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <GPIO_PeriClockControl+0xe8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d105      	bne.n	80004f0 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <GPIO_PeriClockControl+0xcc>)
 80004ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ee:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400
 8000504:	48000800 	.word	0x48000800
 8000508:	48000c00 	.word	0x48000c00
 800050c:	48001000 	.word	0x48001000
 8000510:	48001400 	.word	0x48001400
 8000514:	48001800 	.word	0x48001800
 8000518:	48001c00 	.word	0x48001c00

0800051c <GPIO_Init>:


//Init and De-Init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

	uint32_t temp=0; // temp register
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]

	// Enable peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2101      	movs	r1, #1
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff ff7e 	bl	8000430 <GPIO_PeriClockControl>

	// 1) configure the input mode

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d822      	bhi.n	8000582 <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	461a      	mov	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	2103      	movs	r1, #3
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	43db      	mvns	r3, r3
 8000562:	4619      	mov	r1, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	400a      	ands	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting register
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	6819      	ldr	r1, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	430a      	orrs	r2, r1
 800057a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e140      	b.n	8000804 <GPIO_Init+0x2e8>
	}
	else{
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2103      	movs	r1, #3
 8000590:	fa01 f303 	lsl.w	r3, r1, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	400a      	ands	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
		//pGPIOHandle->pGPIOx->MODER |= ( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // setting register


		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 32;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	f003 031f 	and.w	r3, r3, #31
 80005a8:	60fb      	str	r3, [r7, #12]

		//interupt config part

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d133      	bne.n	800061a <GPIO_Init+0xfe>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	2b1f      	cmp	r3, #31
 80005b8:	d817      	bhi.n	80005ea <GPIO_Init+0xce>
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 80005ba:	4b82      	ldr	r3, [pc, #520]	; (80007c4 <GPIO_Init+0x2a8>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	2101      	movs	r1, #1
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	fa01 f202 	lsl.w	r2, r1, r2
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a7e      	ldr	r2, [pc, #504]	; (80007c4 <GPIO_Init+0x2a8>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	60d3      	str	r3, [r2, #12]

				//clear the corresponding RTSR bit
				EXTI->RTSR1 &= ~(1 << temp);
 80005ce:	4b7d      	ldr	r3, [pc, #500]	; (80007c4 <GPIO_Init+0x2a8>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	2101      	movs	r1, #1
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	43d2      	mvns	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a79      	ldr	r2, [pc, #484]	; (80007c4 <GPIO_Init+0x2a8>)
 80005e0:	400b      	ands	r3, r1
 80005e2:	6093      	str	r3, [r2, #8]

				temp = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e084      	b.n	80006f4 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 80005ea:	4b76      	ldr	r3, [pc, #472]	; (80007c4 <GPIO_Init+0x2a8>)
 80005ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ee:	2101      	movs	r1, #1
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a72      	ldr	r2, [pc, #456]	; (80007c4 <GPIO_Init+0x2a8>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6253      	str	r3, [r2, #36]	; 0x24

				//clear the corresponding RTSR bit
				EXTI->RTSR2 &= ~(1 << temp);
 80005fe:	4b71      	ldr	r3, [pc, #452]	; (80007c4 <GPIO_Init+0x2a8>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	2101      	movs	r1, #1
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
 800060a:	43d2      	mvns	r2, r2
 800060c:	4611      	mov	r1, r2
 800060e:	4a6d      	ldr	r2, [pc, #436]	; (80007c4 <GPIO_Init+0x2a8>)
 8000610:	400b      	ands	r3, r1
 8000612:	6213      	str	r3, [r2, #32]

				temp = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e06c      	b.n	80006f4 <GPIO_Init+0x1d8>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	795b      	ldrb	r3, [r3, #5]
 800061e:	2b05      	cmp	r3, #5
 8000620:	d133      	bne.n	800068a <GPIO_Init+0x16e>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	2b1f      	cmp	r3, #31
 8000628:	d817      	bhi.n	800065a <GPIO_Init+0x13e>
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR1 |= (1 << temp);
 800062a:	4b66      	ldr	r3, [pc, #408]	; (80007c4 <GPIO_Init+0x2a8>)
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	2101      	movs	r1, #1
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4a62      	ldr	r2, [pc, #392]	; (80007c4 <GPIO_Init+0x2a8>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6093      	str	r3, [r2, #8]

				//clear the corresponding RTSR bit
				EXTI->FTSR1 &= ~(1 << temp);
 800063e:	4b61      	ldr	r3, [pc, #388]	; (80007c4 <GPIO_Init+0x2a8>)
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	2101      	movs	r1, #1
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	43d2      	mvns	r2, r2
 800064c:	4611      	mov	r1, r2
 800064e:	4a5d      	ldr	r2, [pc, #372]	; (80007c4 <GPIO_Init+0x2a8>)
 8000650:	400b      	ands	r3, r1
 8000652:	60d3      	str	r3, [r2, #12]

				temp = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	e04c      	b.n	80006f4 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR2 |= (1 << temp);
 800065a:	4b5a      	ldr	r3, [pc, #360]	; (80007c4 <GPIO_Init+0x2a8>)
 800065c:	6a1b      	ldr	r3, [r3, #32]
 800065e:	2101      	movs	r1, #1
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	fa01 f202 	lsl.w	r2, r1, r2
 8000666:	4611      	mov	r1, r2
 8000668:	4a56      	ldr	r2, [pc, #344]	; (80007c4 <GPIO_Init+0x2a8>)
 800066a:	430b      	orrs	r3, r1
 800066c:	6213      	str	r3, [r2, #32]

				//clear the corresponding RTSR bit
				EXTI->FTSR2 &= ~(1 << temp);
 800066e:	4b55      	ldr	r3, [pc, #340]	; (80007c4 <GPIO_Init+0x2a8>)
 8000670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000672:	2101      	movs	r1, #1
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	fa01 f202 	lsl.w	r2, r1, r2
 800067a:	43d2      	mvns	r2, r2
 800067c:	4611      	mov	r1, r2
 800067e:	4a51      	ldr	r2, [pc, #324]	; (80007c4 <GPIO_Init+0x2a8>)
 8000680:	400b      	ands	r3, r1
 8000682:	6253      	str	r3, [r2, #36]	; 0x24

				temp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	e034      	b.n	80006f4 <GPIO_Init+0x1d8>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	795b      	ldrb	r3, [r3, #5]
 800068e:	2b06      	cmp	r3, #6
 8000690:	d130      	bne.n	80006f4 <GPIO_Init+0x1d8>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	2b1f      	cmp	r3, #31
 8000698:	d816      	bhi.n	80006c8 <GPIO_Init+0x1ac>
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 800069a:	4b4a      	ldr	r3, [pc, #296]	; (80007c4 <GPIO_Init+0x2a8>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	2101      	movs	r1, #1
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a46      	ldr	r2, [pc, #280]	; (80007c4 <GPIO_Init+0x2a8>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR1 |= (1 << temp);
 80006ae:	4b45      	ldr	r3, [pc, #276]	; (80007c4 <GPIO_Init+0x2a8>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	2101      	movs	r1, #1
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a41      	ldr	r2, [pc, #260]	; (80007c4 <GPIO_Init+0x2a8>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6093      	str	r3, [r2, #8]

				temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	e015      	b.n	80006f4 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 80006c8:	4b3e      	ldr	r3, [pc, #248]	; (80007c4 <GPIO_Init+0x2a8>)
 80006ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006cc:	2101      	movs	r1, #1
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	fa01 f202 	lsl.w	r2, r1, r2
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a3b      	ldr	r2, [pc, #236]	; (80007c4 <GPIO_Init+0x2a8>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6253      	str	r3, [r2, #36]	; 0x24
				EXTI->RTSR2 |= (1 << temp);
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <GPIO_Init+0x2a8>)
 80006de:	6a1b      	ldr	r3, [r3, #32]
 80006e0:	2101      	movs	r1, #1
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a36      	ldr	r2, [pc, #216]	; (80007c4 <GPIO_Init+0x2a8>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6213      	str	r3, [r2, #32]

				temp = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
		}


		 //2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	72bb      	strb	r3, [r7, #10]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800070e:	d032      	beq.n	8000776 <GPIO_Init+0x25a>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <GPIO_Init+0x2ac>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d02b      	beq.n	8000772 <GPIO_Init+0x256>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a2b      	ldr	r2, [pc, #172]	; (80007cc <GPIO_Init+0x2b0>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d024      	beq.n	800076e <GPIO_Init+0x252>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <GPIO_Init+0x2b4>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d01d      	beq.n	800076a <GPIO_Init+0x24e>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a28      	ldr	r2, [pc, #160]	; (80007d4 <GPIO_Init+0x2b8>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d016      	beq.n	8000766 <GPIO_Init+0x24a>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <GPIO_Init+0x2bc>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d00f      	beq.n	8000762 <GPIO_Init+0x246>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a25      	ldr	r2, [pc, #148]	; (80007dc <GPIO_Init+0x2c0>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d008      	beq.n	800075e <GPIO_Init+0x242>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <GPIO_Init+0x2c4>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <GPIO_Init+0x23e>
 8000756:	2307      	movs	r3, #7
 8000758:	e00e      	b.n	8000778 <GPIO_Init+0x25c>
 800075a:	2300      	movs	r3, #0
 800075c:	e00c      	b.n	8000778 <GPIO_Init+0x25c>
 800075e:	2306      	movs	r3, #6
 8000760:	e00a      	b.n	8000778 <GPIO_Init+0x25c>
 8000762:	2305      	movs	r3, #5
 8000764:	e008      	b.n	8000778 <GPIO_Init+0x25c>
 8000766:	2304      	movs	r3, #4
 8000768:	e006      	b.n	8000778 <GPIO_Init+0x25c>
 800076a:	2303      	movs	r3, #3
 800076c:	e004      	b.n	8000778 <GPIO_Init+0x25c>
 800076e:	2302      	movs	r3, #2
 8000770:	e002      	b.n	8000778 <GPIO_Init+0x25c>
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <GPIO_Init+0x25c>
 8000776:	2300      	movs	r3, #0
 8000778:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <GPIO_Init+0x2c8>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <GPIO_Init+0x2c8>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	; 0x60
		SYSCFG->EXTICR[temp1] = portCode << ( temp2 * 4);
 8000786:	7a7a      	ldrb	r2, [r7, #9]
 8000788:	7abb      	ldrb	r3, [r7, #10]
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	fa02 f103 	lsl.w	r1, r2, r3
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <GPIO_Init+0x2cc>)
 8000792:	7afb      	ldrb	r3, [r7, #11]
 8000794:	3302      	adds	r3, #2
 8000796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delivery using IMR - interrupt mask register

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %32;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	f003 031f 	and.w	r3, r3, #31
 80007a2:	60fb      	str	r3, [r7, #12]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	2b1f      	cmp	r3, #31
 80007aa:	d81f      	bhi.n	80007ec <GPIO_Init+0x2d0>
			EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <GPIO_Init+0x2a8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	408a      	lsls	r2, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a01      	ldr	r2, [pc, #4]	; (80007c4 <GPIO_Init+0x2a8>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	e01d      	b.n	8000800 <GPIO_Init+0x2e4>
 80007c4:	40010400 	.word	0x40010400
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800
 80007d0:	48000c00 	.word	0x48000c00
 80007d4:	48001000 	.word	0x48001000
 80007d8:	48001400 	.word	0x48001400
 80007dc:	48001800 	.word	0x48001800
 80007e0:	48001c00 	.word	0x48001c00
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010000 	.word	0x40010000
		}
		else{
			EXTI->IMR2 |= 1 << temp;
 80007ec:	4b5e      	ldr	r3, [pc, #376]	; (8000968 <GPIO_Init+0x44c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	2101      	movs	r1, #1
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a5b      	ldr	r2, [pc, #364]	; (8000968 <GPIO_Init+0x44c>)
 80007fc:	430b      	orrs	r3, r1
 80007fe:	6193      	str	r3, [r2, #24]
		}

		temp = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
	}

	// 2) configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	799b      	ldrb	r3, [r3, #6]
 8000808:	461a      	mov	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2103      	movs	r1, #3
 8000824:	fa01 f303 	lsl.w	r3, r1, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	4619      	mov	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	400a      	ands	r2, r1
 8000832:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // setting register
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	6899      	ldr	r1, [r3, #8]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	430a      	orrs	r2, r1
 8000842:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]

	// 3) configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	79db      	ldrb	r3, [r3, #7]
 800084c:	461a      	mov	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	2103      	movs	r1, #3
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	400a      	ands	r2, r1
 8000876:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // setting register
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68d9      	ldr	r1, [r3, #12]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	430a      	orrs	r2, r1
 8000886:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]

	// 4) configure the out put type - optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7a1b      	ldrb	r3, [r3, #8]
 8000890:	461a      	mov	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing register
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	4619      	mov	r1, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	408b      	lsls	r3, r1
 80008ac:	43db      	mvns	r3, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	400a      	ands	r2, r1
 80008b6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; // setting register
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6859      	ldr	r1, [r3, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	430a      	orrs	r2, r1
 80008c6:	605a      	str	r2, [r3, #4]

	temp = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]

	// 5) configure the alt functionality

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	795b      	ldrb	r3, [r3, #5]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d145      	bne.n	8000960 <GPIO_Init+0x444>

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	60fb      	str	r3, [r7, #12]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	791b      	ldrb	r3, [r3, #4]
 80008e2:	2b07      	cmp	r3, #7
 80008e4:	d81d      	bhi.n	8000922 <GPIO_Init+0x406>
			pGPIOHandle->pGPIOx->AFRL &= ~( 0xF << (4 * temp)); // clearing register
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6a1a      	ldr	r2, [r3, #32]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	210f      	movs	r1, #15
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	400a      	ands	r2, r1
 8000900:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6a1a      	ldr	r2, [r3, #32]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a5b      	ldrb	r3, [r3, #9]
 800090c:	4619      	mov	r1, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	4619      	mov	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	430a      	orrs	r2, r1
 800091e:	621a      	str	r2, [r3, #32]
 8000920:	e01c      	b.n	800095c <GPIO_Init+0x440>
		}
		else{
			pGPIOHandle->pGPIOx->AFRH &= ~( 0xF << (4 * temp)); // clearing register
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	210f      	movs	r1, #15
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	400a      	ands	r2, r1
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7a5b      	ldrb	r3, [r3, #9]
 8000948:	4619      	mov	r1, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	4619      	mov	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	430a      	orrs	r2, r1
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
		}

		temp = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
	}
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40010400 	.word	0x40010400

0800096c <GPIO_ReadFromInputPin>:
 * @return            -  0 or 1
 *
 * @Note              -  none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t)( (pGPIOx->IDR >>PinNumber) & 0x00000001);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	691a      	ldr	r2, [r3, #16]
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	fa22 f303 	lsr.w	r3, r2, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]

	return value;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <GPIO_WriteToOutputPin>:
 * @return            -  void
 *
 * @Note              -  none
 */

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
 80009a4:	4613      	mov	r3, r2
 80009a6:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET){
 80009a8:	78bb      	ldrb	r3, [r7, #2]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d109      	bne.n	80009c2 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	2101      	movs	r1, #1
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 80009c0:	e009      	b.n	80009d6 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	78fa      	ldrb	r2, [r7, #3]
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f202 	lsl.w	r2, r1, r2
 80009ce:	43d2      	mvns	r2, r2
 80009d0:	401a      	ands	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	615a      	str	r2, [r3, #20]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <SPI_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d11f      	bne.n	8000a36 <SPI_PeriClockControl+0x52>
		if(pSPIx == SPI1){
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <SPI_PeriClockControl+0x60>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d106      	bne.n	8000a0c <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <SPI_PeriClockControl+0x64>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <SPI_PeriClockControl+0x64>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a08:	6613      	str	r3, [r2, #96]	; 0x60
		}
		else if(pSPIx == SPI3){
			SPI3_PCLK_EN();
		}
	}
}
 8000a0a:	e014      	b.n	8000a36 <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI2){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <SPI_PeriClockControl+0x68>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d106      	bne.n	8000a22 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <SPI_PeriClockControl+0x64>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <SPI_PeriClockControl+0x64>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a20:	e009      	b.n	8000a36 <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI3){
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <SPI_PeriClockControl+0x6c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d105      	bne.n	8000a36 <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000a2a:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <SPI_PeriClockControl+0x64>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <SPI_PeriClockControl+0x64>)
 8000a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40013000 	.word	0x40013000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40003800 	.word	0x40003800
 8000a50:	40003c00 	.word	0x40003c00

08000a54 <SPI_Init>:


//Init and De-Init
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

		// Enable peripheral clock

		SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ffbe 	bl	80009e4 <SPI_PeriClockControl>

		// first configure the SPI_CR1 reg

		uint32_t tempreg = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]

		// 1. configure the device mode
		tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	791b      	ldrb	r3, [r3, #4]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]

		// 2. configure the bus config
		if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d104      	bne.n	8000a8c <SPI_Init+0x38>
			//BIDI mode should be cleared
			tempreg &= ~( 1 << 15);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e014      	b.n	8000ab6 <SPI_Init+0x62>
		}
		else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	795b      	ldrb	r3, [r3, #5]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d104      	bne.n	8000a9e <SPI_Init+0x4a>
			//BIDI mode should be set
			tempreg |= ( 1 << 15);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e00b      	b.n	8000ab6 <SPI_Init+0x62>
		}
		else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	795b      	ldrb	r3, [r3, #5]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d107      	bne.n	8000ab6 <SPI_Init+0x62>
			//BIDI mode should be cleared
			tempreg &= ~( 1 << 15);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000aac:	60fb      	str	r3, [r7, #12]
			//RXONLY bit must be set
			tempreg |= ( 1 << 10);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab4:	60fb      	str	r3, [r7, #12]
		}

		// 3. configure the SPI serial clock speed (baud rate)
		tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	799b      	ldrb	r3, [r3, #6]
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

		// 4. configure the DFF
		tempreg |= pSPIHandle->SPIConfig.SPI_CRCL << SPI_CR1_CRCL;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	79db      	ldrb	r3, [r3, #7]
 8000ac8:	02db      	lsls	r3, r3, #11
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]

		// 5. configure the CPOL
		tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7a1b      	ldrb	r3, [r3, #8]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	461a      	mov	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

		// 6. configure the CPHA
		tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7a5b      	ldrb	r3, [r3, #9]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

		tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7a9b      	ldrb	r3, [r3, #10]
 8000af0:	025b      	lsls	r3, r3, #9
 8000af2:	461a      	mov	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	60fb      	str	r3, [r7, #12]

		// all the necessary bits are set in the CR1 register
		pSPIHandle->pSPIx->CR1 = tempreg;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	601a      	str	r2, [r3, #0]
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <SPI_SendData>:
}



//Data read and write - THIS IS BLOCKING CALL
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Len){
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]

		while(Len > 0){
 8000b16:	e027      	b.n	8000b68 <SPI_SendData+0x5e>

			// 1. wait until TXE is set
			while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000b18:	bf00      	nop
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f000 f898 	bl	8000c52 <SPI_GetFlagStatus>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f8      	beq.n	8000b1a <SPI_SendData+0x10>

			// 2. check the DFF bit
			if(pSPIx->CR1 & ( 1 << SPI_CR1_CRCL ) ){
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00e      	beq.n	8000b52 <SPI_SendData+0x48>
				// 16 bit CRCL

				// 1. load the data in to the DR
				pSPIx->DR = *( (uint16_t*) pTXBuffer);
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	60da      	str	r2, [r3, #12]

				Len--;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3b01      	subs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
				Len--;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	607b      	str	r3, [r7, #4]

				(uint16_t*) pTXBuffer++;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	e00a      	b.n	8000b68 <SPI_SendData+0x5e>
			}
			else{
				// 8 bit CRCL

				// 1. load the data in to the DR
				pSPIx->DR = *pTXBuffer;
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	60da      	str	r2, [r3, #12]

				Len--;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]

				 pTXBuffer++;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
		while(Len > 0){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1d4      	bne.n	8000b18 <SPI_SendData+0xe>
			}
		}
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <SPI_ReceiveData>:


void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRXBuffer, uint32_t Len){
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]

	while(Len > 0){
 8000b82:	e027      	b.n	8000bd4 <SPI_ReceiveData+0x5e>

		// 1. wait until RXNE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);
 8000b84:	bf00      	nop
 8000b86:	2101      	movs	r1, #1
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f862 	bl	8000c52 <SPI_GetFlagStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f8      	beq.n	8000b86 <SPI_ReceiveData+0x10>

		// 2. check the DFF bit
		if(pSPIx->CR1 & ( 1 << SPI_CR1_CRCL ) ){
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00e      	beq.n	8000bbe <SPI_ReceiveData+0x48>
			// 16 bit CRCL

			// 1. load the data from DR to RXbuffer address
			 *( (uint16_t*) pRXBuffer ) = pSPIx->DR;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	801a      	strh	r2, [r3, #0]

			Len--;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
			Len--;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]

			(uint16_t*) pRXBuffer++;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	e00a      	b.n	8000bd4 <SPI_ReceiveData+0x5e>
		}
		else{
			// 8 bit CRCL

			// 1. load the data in to the DR
			 *(pRXBuffer ) = pSPIx->DR;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	701a      	strb	r2, [r3, #0]

			Len--;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]

			 pRXBuffer++;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1d4      	bne.n	8000b84 <SPI_ReceiveData+0xe>
		}
	}
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <SPI_PeripheralControl>:

void SPI_IRQHandling(SPI_Handle_t *pHandle){

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d106      	bne.n	8000c02 <SPI_PeripheralControl+0x20>
		pSPIx->CR1  |= (1 << SPI_CR1_SPE);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
	}
}
 8000c00:	e005      	b.n	8000c0e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	601a      	str	r2, [r3, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <SPI_SSOEConfig>:
	}


}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d106      	bne.n	8000c3a <SPI_SSOEConfig+0x20>
		pSPIx->CR2  |= (1 << SPI_CR2_SSOE);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f043 0204 	orr.w	r2, r3, #4
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	605a      	str	r2, [r3, #4]
	else{
		pSPIx->CR2  &= ~(1 << SPI_CR2_SSOE);
	}


}
 8000c38:	e005      	b.n	8000c46 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2  &= ~(1 << SPI_CR2_SSOE);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f023 0204 	bic.w	r2, r3, #4
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	605a      	str	r2, [r3, #4]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <__libc_init_array>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	4e0d      	ldr	r6, [pc, #52]	; (8000cb4 <__libc_init_array+0x38>)
 8000c80:	4c0d      	ldr	r4, [pc, #52]	; (8000cb8 <__libc_init_array+0x3c>)
 8000c82:	1ba4      	subs	r4, r4, r6
 8000c84:	10a4      	asrs	r4, r4, #2
 8000c86:	2500      	movs	r5, #0
 8000c88:	42a5      	cmp	r5, r4
 8000c8a:	d109      	bne.n	8000ca0 <__libc_init_array+0x24>
 8000c8c:	4e0b      	ldr	r6, [pc, #44]	; (8000cbc <__libc_init_array+0x40>)
 8000c8e:	4c0c      	ldr	r4, [pc, #48]	; (8000cc0 <__libc_init_array+0x44>)
 8000c90:	f000 f818 	bl	8000cc4 <_init>
 8000c94:	1ba4      	subs	r4, r4, r6
 8000c96:	10a4      	asrs	r4, r4, #2
 8000c98:	2500      	movs	r5, #0
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	d105      	bne.n	8000caa <__libc_init_array+0x2e>
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ca4:	4798      	blx	r3
 8000ca6:	3501      	adds	r5, #1
 8000ca8:	e7ee      	b.n	8000c88 <__libc_init_array+0xc>
 8000caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cae:	4798      	blx	r3
 8000cb0:	3501      	adds	r5, #1
 8000cb2:	e7f2      	b.n	8000c9a <__libc_init_array+0x1e>
 8000cb4:	08000cdc 	.word	0x08000cdc
 8000cb8:	08000cdc 	.word	0x08000cdc
 8000cbc:	08000cdc 	.word	0x08000cdc
 8000cc0:	08000ce0 	.word	0x08000ce0

08000cc4 <_init>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr

08000cd0 <_fini>:
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	bf00      	nop
 8000cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd6:	bc08      	pop	{r3}
 8000cd8:	469e      	mov	lr, r3
 8000cda:	4770      	bx	lr
