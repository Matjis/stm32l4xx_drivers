
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000754  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008dc  080008e4  000108e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008dc  080008dc  000108e4  2**0
                  CONTENTS
  4 .ARM          00000000  080008dc  080008dc  000108e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008dc  080008e4  000108e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008dc  080008dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008e0  080008e0  000108e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080008e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080008e4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000108e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001186  00000000  00000000  00010914  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000030f  00000000  00000000  00011a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  00011db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  00011e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002045  00000000  00000000  00011ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000bf8  00000000  00000000  00013f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000965e  00000000  00000000  00014b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e173  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  0001e1f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008c4 	.word	0x080008c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008c4 	.word	0x080008c4

080001c8 <delay>:


#include "stm32l476xx.h"
#include "stdio.h"

void delay(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000; i++);
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	0007a11f 	.word	0x0007a11f

080001f4 <main>:

int main(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08a      	sub	sp, #40	; 0x28
 80001f8:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed1, GpioLed2, GpioExtButton;


	//led 1 config - A6 built in led for L476xx;
	GpioLed1.pGPIOx = GPIOA;
 80001fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001fe:	61bb      	str	r3, [r7, #24]
	GpioLed1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000200:	2305      	movs	r3, #5
 8000202:	773b      	strb	r3, [r7, #28]
	GpioLed1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000204:	2301      	movs	r3, #1
 8000206:	777b      	strb	r3, [r7, #29]
	GpioLed1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000208:	2302      	movs	r3, #2
 800020a:	77bb      	strb	r3, [r7, #30]
	GpioLed1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020c:	2300      	movs	r3, #0
 800020e:	f887 3020 	strb.w	r3, [r7, #32]
	GpioLed1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000212:	2300      	movs	r3, #0
 8000214:	77fb      	strb	r3, [r7, #31]

	//led 2 config
	GpioLed2.pGPIOx = GPIOA;
 8000216:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021a:	60fb      	str	r3, [r7, #12]
	GpioLed2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800021c:	2306      	movs	r3, #6
 800021e:	743b      	strb	r3, [r7, #16]
	GpioLed2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000220:	2301      	movs	r3, #1
 8000222:	747b      	strb	r3, [r7, #17]
	GpioLed2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000224:	2302      	movs	r3, #2
 8000226:	74bb      	strb	r3, [r7, #18]
	GpioLed2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; // with aditional pull up resistor to 3v3 form pin 6
 8000228:	2301      	movs	r3, #1
 800022a:	753b      	strb	r3, [r7, #20]
	GpioLed2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022c:	2300      	movs	r3, #0
 800022e:	74fb      	strb	r3, [r7, #19]

	//external button config
	GpioExtButton.pGPIOx = GPIOA;
 8000230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000234:	603b      	str	r3, [r7, #0]
	GpioExtButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000236:	2307      	movs	r3, #7
 8000238:	713b      	strb	r3, [r7, #4]
	GpioExtButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800023a:	2300      	movs	r3, #0
 800023c:	717b      	strb	r3, [r7, #5]
	GpioExtButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800023e:	2302      	movs	r3, #2
 8000240:	71bb      	strb	r3, [r7, #6]
	GpioExtButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]


	GPIO_PeriClockControl(GPIOA,ENABLE);
 8000246:	2101      	movs	r1, #1
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024c:	f000 f856 	bl	80002fc <GPIO_PeriClockControl>


	GPIO_Init(&GpioLed1);
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f8c7 	bl	80003e8 <GPIO_Init>
	GPIO_Init(&GpioLed2);
 800025a:	f107 030c 	add.w	r3, r7, #12
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f8c2 	bl	80003e8 <GPIO_Init>
	GPIO_Init(&GpioExtButton);
 8000264:	463b      	mov	r3, r7
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f8be 	bl	80003e8 <GPIO_Init>


	int state = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	627b      	str	r3, [r7, #36]	; 0x24

	while(1){

		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_7) == 0){
 8000270:	2107      	movs	r1, #7
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 fac5 	bl	8000804 <GPIO_ReadFromInputPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1f7      	bne.n	8000270 <main+0x7c>
					delay();
 8000280:	f7ff ffa2 	bl	80001c8 <delay>
					//GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);


					if(state == 0)
 8000284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <main+0x9c>
						state = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	627b      	str	r3, [r7, #36]	; 0x24
 800028e:	e001      	b.n	8000294 <main+0xa0>
					else
						state = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	627b      	str	r3, [r7, #36]	; 0x24

					GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_6, state);
 8000294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	2106      	movs	r1, #6
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f000 fac6 	bl	8000830 <GPIO_WriteToOutputPin>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_7) == 0){
 80002a4:	e7e4      	b.n	8000270 <main+0x7c>
	...

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 fad1 	bl	800087c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff8b 	bl	80001f4 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	080008e4 	.word	0x080008e4
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d156      	bne.n	80003bc <GPIO_PeriClockControl+0xc0>
		if(pGPIOx == GPIOA){
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000314:	d106      	bne.n	8000324 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000316:	4b2c      	ldr	r3, [pc, #176]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a2b      	ldr	r2, [pc, #172]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_EN();
		}
	}
}
 8000322:	e04b      	b.n	80003bc <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOB){
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a29      	ldr	r2, [pc, #164]	; (80003cc <GPIO_PeriClockControl+0xd0>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 800032e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000330:	4a25      	ldr	r2, [pc, #148]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000338:	e040      	b.n	80003bc <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOC){
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <GPIO_PeriClockControl+0xd4>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a20      	ldr	r2, [pc, #128]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800034e:	e035      	b.n	80003bc <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOD){
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a20      	ldr	r2, [pc, #128]	; (80003d4 <GPIO_PeriClockControl+0xd8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 800035a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035c:	4a1a      	ldr	r2, [pc, #104]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000364:	e02a      	b.n	80003bc <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOE){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <GPIO_PeriClockControl+0xdc>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800036e:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a15      	ldr	r2, [pc, #84]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800037a:	e01f      	b.n	80003bc <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOF){
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a17      	ldr	r2, [pc, #92]	; (80003dc <GPIO_PeriClockControl+0xe0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 8000386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000388:	4a0f      	ldr	r2, [pc, #60]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000390:	e014      	b.n	80003bc <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOG){
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <GPIO_PeriClockControl+0xe4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 80003a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80003a6:	e009      	b.n	80003bc <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOH){
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <GPIO_PeriClockControl+0xe8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d105      	bne.n	80003bc <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 80003b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <GPIO_PeriClockControl+0xcc>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ba:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000400 	.word	0x48000400
 80003d0:	48000800 	.word	0x48000800
 80003d4:	48000c00 	.word	0x48000c00
 80003d8:	48001000 	.word	0x48001000
 80003dc:	48001400 	.word	0x48001400
 80003e0:	48001800 	.word	0x48001800
 80003e4:	48001c00 	.word	0x48001c00

080003e8 <GPIO_Init>:


//Init and De-Init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

	uint32_t temp=0; // temp register
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]

	// 1) configure the input mode

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	795b      	ldrb	r3, [r3, #5]
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	d822      	bhi.n	8000442 <GPIO_Init+0x5a>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	461a      	mov	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	791b      	ldrb	r3, [r3, #4]
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	2103      	movs	r1, #3
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
 8000420:	43db      	mvns	r3, r3
 8000422:	4619      	mov	r1, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	400a      	ands	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting register
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	6819      	ldr	r1, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	68fa      	ldr	r2, [r7, #12]
 8000438:	430a      	orrs	r2, r1
 800043a:	601a      	str	r2, [r3, #0]
		temp = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	e12a      	b.n	8000698 <GPIO_Init+0x2b0>
	}
	else{
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 32;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	f003 031f 	and.w	r3, r3, #31
 800044a:	60fb      	str	r3, [r7, #12]

		//interupt config part

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b04      	cmp	r3, #4
 8000452:	d133      	bne.n	80004bc <GPIO_Init+0xd4>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	2b1f      	cmp	r3, #31
 800045a:	d817      	bhi.n	800048c <GPIO_Init+0xa4>
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 800045c:	4b7f      	ldr	r3, [pc, #508]	; (800065c <GPIO_Init+0x274>)
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	2101      	movs	r1, #1
 8000462:	68fa      	ldr	r2, [r7, #12]
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a7c      	ldr	r2, [pc, #496]	; (800065c <GPIO_Init+0x274>)
 800046c:	430b      	orrs	r3, r1
 800046e:	60d3      	str	r3, [r2, #12]

				//clear the corresponding RTSR bit
				EXTI->RTSR1 &= ~(1 << temp);
 8000470:	4b7a      	ldr	r3, [pc, #488]	; (800065c <GPIO_Init+0x274>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	2101      	movs	r1, #1
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	fa01 f202 	lsl.w	r2, r1, r2
 800047c:	43d2      	mvns	r2, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a76      	ldr	r2, [pc, #472]	; (800065c <GPIO_Init+0x274>)
 8000482:	400b      	ands	r3, r1
 8000484:	6093      	str	r3, [r2, #8]

				temp = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	e084      	b.n	8000596 <GPIO_Init+0x1ae>
			}
			else{
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 800048c:	4b73      	ldr	r3, [pc, #460]	; (800065c <GPIO_Init+0x274>)
 800048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000490:	2101      	movs	r1, #1
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	fa01 f202 	lsl.w	r2, r1, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a70      	ldr	r2, [pc, #448]	; (800065c <GPIO_Init+0x274>)
 800049c:	430b      	orrs	r3, r1
 800049e:	6253      	str	r3, [r2, #36]	; 0x24

				//clear the corresponding RTSR bit
				EXTI->RTSR2 &= ~(1 << temp);
 80004a0:	4b6e      	ldr	r3, [pc, #440]	; (800065c <GPIO_Init+0x274>)
 80004a2:	6a1b      	ldr	r3, [r3, #32]
 80004a4:	2101      	movs	r1, #1
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	43d2      	mvns	r2, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a6a      	ldr	r2, [pc, #424]	; (800065c <GPIO_Init+0x274>)
 80004b2:	400b      	ands	r3, r1
 80004b4:	6213      	str	r3, [r2, #32]

				temp = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	e06c      	b.n	8000596 <GPIO_Init+0x1ae>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	2b05      	cmp	r3, #5
 80004c2:	d133      	bne.n	800052c <GPIO_Init+0x144>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	2b1f      	cmp	r3, #31
 80004ca:	d817      	bhi.n	80004fc <GPIO_Init+0x114>
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR1 |= (1 << temp);
 80004cc:	4b63      	ldr	r3, [pc, #396]	; (800065c <GPIO_Init+0x274>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	2101      	movs	r1, #1
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a60      	ldr	r2, [pc, #384]	; (800065c <GPIO_Init+0x274>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6093      	str	r3, [r2, #8]

				//clear the corresponding RTSR bit
				EXTI->FTSR1 &= ~(1 << temp);
 80004e0:	4b5e      	ldr	r3, [pc, #376]	; (800065c <GPIO_Init+0x274>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	2101      	movs	r1, #1
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a5a      	ldr	r2, [pc, #360]	; (800065c <GPIO_Init+0x274>)
 80004f2:	400b      	ands	r3, r1
 80004f4:	60d3      	str	r3, [r2, #12]

				temp = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e04c      	b.n	8000596 <GPIO_Init+0x1ae>
			}
			else{
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR2 |= (1 << temp);
 80004fc:	4b57      	ldr	r3, [pc, #348]	; (800065c <GPIO_Init+0x274>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	2101      	movs	r1, #1
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a54      	ldr	r2, [pc, #336]	; (800065c <GPIO_Init+0x274>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6213      	str	r3, [r2, #32]

				//clear the corresponding RTSR bit
				EXTI->FTSR2 &= ~(1 << temp);
 8000510:	4b52      	ldr	r3, [pc, #328]	; (800065c <GPIO_Init+0x274>)
 8000512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000514:	2101      	movs	r1, #1
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	43d2      	mvns	r2, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a4e      	ldr	r2, [pc, #312]	; (800065c <GPIO_Init+0x274>)
 8000522:	400b      	ands	r3, r1
 8000524:	6253      	str	r3, [r2, #36]	; 0x24

				temp = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
 800052a:	e034      	b.n	8000596 <GPIO_Init+0x1ae>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	2b06      	cmp	r3, #6
 8000532:	d130      	bne.n	8000596 <GPIO_Init+0x1ae>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	2b1f      	cmp	r3, #31
 800053a:	d816      	bhi.n	800056a <GPIO_Init+0x182>
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 800053c:	4b47      	ldr	r3, [pc, #284]	; (800065c <GPIO_Init+0x274>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	2101      	movs	r1, #1
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a44      	ldr	r2, [pc, #272]	; (800065c <GPIO_Init+0x274>)
 800054c:	430b      	orrs	r3, r1
 800054e:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR1 |= (1 << temp);
 8000550:	4b42      	ldr	r3, [pc, #264]	; (800065c <GPIO_Init+0x274>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	2101      	movs	r1, #1
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	fa01 f202 	lsl.w	r2, r1, r2
 800055c:	4611      	mov	r1, r2
 800055e:	4a3f      	ldr	r2, [pc, #252]	; (800065c <GPIO_Init+0x274>)
 8000560:	430b      	orrs	r3, r1
 8000562:	6093      	str	r3, [r2, #8]

				temp = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e015      	b.n	8000596 <GPIO_Init+0x1ae>
			}
			else{
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 800056a:	4b3c      	ldr	r3, [pc, #240]	; (800065c <GPIO_Init+0x274>)
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	2101      	movs	r1, #1
 8000570:	68fa      	ldr	r2, [r7, #12]
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	4611      	mov	r1, r2
 8000578:	4a38      	ldr	r2, [pc, #224]	; (800065c <GPIO_Init+0x274>)
 800057a:	430b      	orrs	r3, r1
 800057c:	6253      	str	r3, [r2, #36]	; 0x24
				EXTI->RTSR2 |= (1 << temp);
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <GPIO_Init+0x274>)
 8000580:	6a1b      	ldr	r3, [r3, #32]
 8000582:	2101      	movs	r1, #1
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a33      	ldr	r2, [pc, #204]	; (800065c <GPIO_Init+0x274>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6213      	str	r3, [r2, #32]

				temp = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
			}
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	72bb      	strb	r3, [r7, #10]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005b0:	d032      	beq.n	8000618 <GPIO_Init+0x230>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <GPIO_Init+0x278>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d02b      	beq.n	8000614 <GPIO_Init+0x22c>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a28      	ldr	r2, [pc, #160]	; (8000664 <GPIO_Init+0x27c>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d024      	beq.n	8000610 <GPIO_Init+0x228>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a27      	ldr	r2, [pc, #156]	; (8000668 <GPIO_Init+0x280>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d01d      	beq.n	800060c <GPIO_Init+0x224>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <GPIO_Init+0x284>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <GPIO_Init+0x220>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a24      	ldr	r2, [pc, #144]	; (8000670 <GPIO_Init+0x288>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d00f      	beq.n	8000604 <GPIO_Init+0x21c>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a22      	ldr	r2, [pc, #136]	; (8000674 <GPIO_Init+0x28c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d008      	beq.n	8000600 <GPIO_Init+0x218>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a21      	ldr	r2, [pc, #132]	; (8000678 <GPIO_Init+0x290>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d101      	bne.n	80005fc <GPIO_Init+0x214>
 80005f8:	2307      	movs	r3, #7
 80005fa:	e00e      	b.n	800061a <GPIO_Init+0x232>
 80005fc:	2300      	movs	r3, #0
 80005fe:	e00c      	b.n	800061a <GPIO_Init+0x232>
 8000600:	2306      	movs	r3, #6
 8000602:	e00a      	b.n	800061a <GPIO_Init+0x232>
 8000604:	2305      	movs	r3, #5
 8000606:	e008      	b.n	800061a <GPIO_Init+0x232>
 8000608:	2304      	movs	r3, #4
 800060a:	e006      	b.n	800061a <GPIO_Init+0x232>
 800060c:	2303      	movs	r3, #3
 800060e:	e004      	b.n	800061a <GPIO_Init+0x232>
 8000610:	2302      	movs	r3, #2
 8000612:	e002      	b.n	800061a <GPIO_Init+0x232>
 8000614:	2301      	movs	r3, #1
 8000616:	e000      	b.n	800061a <GPIO_Init+0x232>
 8000618:	2300      	movs	r3, #0
 800061a:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 800061c:	4b17      	ldr	r3, [pc, #92]	; (800067c <GPIO_Init+0x294>)
 800061e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <GPIO_Init+0x294>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6613      	str	r3, [r2, #96]	; 0x60
		SYSCFG->EXTICR[temp1] = portCode << ( temp2 * 4);
 8000628:	7a7a      	ldrb	r2, [r7, #9]
 800062a:	7abb      	ldrb	r3, [r7, #10]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	fa02 f103 	lsl.w	r1, r2, r3
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <GPIO_Init+0x298>)
 8000634:	7afb      	ldrb	r3, [r7, #11]
 8000636:	3302      	adds	r3, #2
 8000638:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delivery using IMR - interrupt mask register

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	2b1f      	cmp	r3, #31
 8000642:	d81f      	bhi.n	8000684 <GPIO_Init+0x29c>
			EXTI->IMR1 |= 1 << temp;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <GPIO_Init+0x274>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	4611      	mov	r1, r2
 8000652:	4a02      	ldr	r2, [pc, #8]	; (800065c <GPIO_Init+0x274>)
 8000654:	430b      	orrs	r3, r1
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	e01e      	b.n	8000698 <GPIO_Init+0x2b0>
 800065a:	bf00      	nop
 800065c:	40010400 	.word	0x40010400
 8000660:	48000400 	.word	0x48000400
 8000664:	48000800 	.word	0x48000800
 8000668:	48000c00 	.word	0x48000c00
 800066c:	48001000 	.word	0x48001000
 8000670:	48001400 	.word	0x48001400
 8000674:	48001800 	.word	0x48001800
 8000678:	48001c00 	.word	0x48001c00
 800067c:	40021000 	.word	0x40021000
 8000680:	40010000 	.word	0x40010000
		}
		else{
			EXTI->IMR2 |= 1 << temp;
 8000684:	4b5e      	ldr	r3, [pc, #376]	; (8000800 <GPIO_Init+0x418>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	2101      	movs	r1, #1
 800068a:	68fa      	ldr	r2, [r7, #12]
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a5b      	ldr	r2, [pc, #364]	; (8000800 <GPIO_Init+0x418>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6193      	str	r3, [r2, #24]

	//temp = 0;

	// 2) configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	799b      	ldrb	r3, [r3, #6]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2103      	movs	r1, #3
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // setting register
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6899      	ldr	r1, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	609a      	str	r2, [r3, #8]

	temp = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]

	// 3) configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	79db      	ldrb	r3, [r3, #7]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	68da      	ldr	r2, [r3, #12]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	2103      	movs	r1, #3
 80006fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	400a      	ands	r2, r1
 800070a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // setting register
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68d9      	ldr	r1, [r3, #12]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	430a      	orrs	r2, r1
 800071a:	60da      	str	r2, [r3, #12]

	temp = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]

	// 4) configure the out put type - optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // multiplication by 2 for pin number means that mode register is 2 bit in size
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7a1b      	ldrb	r3, [r3, #8]
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing register
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	4619      	mov	r1, r3
 800073c:	2301      	movs	r3, #1
 800073e:	408b      	lsls	r3, r1
 8000740:	43db      	mvns	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	400a      	ands	r2, r1
 800074a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; // setting register
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	6859      	ldr	r1, [r3, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	430a      	orrs	r2, r1
 800075a:	605a      	str	r2, [r3, #4]

	temp = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]

	// 5) configure the alt functionality

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	795b      	ldrb	r3, [r3, #5]
 8000764:	2b02      	cmp	r3, #2
 8000766:	d145      	bne.n	80007f4 <GPIO_Init+0x40c>

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	f003 0307 	and.w	r3, r3, #7
 8000770:	60fb      	str	r3, [r7, #12]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	2b07      	cmp	r3, #7
 8000778:	d81d      	bhi.n	80007b6 <GPIO_Init+0x3ce>
			pGPIOHandle->pGPIOx->AFRL &= ~( 0xF << (4 * temp)); // clearing register
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6a1a      	ldr	r2, [r3, #32]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	210f      	movs	r1, #15
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6a1a      	ldr	r2, [r3, #32]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7a5b      	ldrb	r3, [r3, #9]
 80007a0:	4619      	mov	r1, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	4619      	mov	r1, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	430a      	orrs	r2, r1
 80007b2:	621a      	str	r2, [r3, #32]
 80007b4:	e01c      	b.n	80007f0 <GPIO_Init+0x408>
		}
		else{
			pGPIOHandle->pGPIOx->AFRH &= ~( 0xF << (4 * temp)); // clearing register
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	210f      	movs	r1, #15
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	400a      	ands	r2, r1
 80007d0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	7a5b      	ldrb	r3, [r3, #9]
 80007dc:	4619      	mov	r1, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
		}

		temp = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
	}

}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40010400 	.word	0x40010400

08000804 <GPIO_ReadFromInputPin>:
 * @return            -  0 or 1
 *
 * @Note              -  none
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t)( (pGPIOx->IDR >>PinNumber) & 0x00000001);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	691a      	ldr	r2, [r3, #16]
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	fa22 f303 	lsr.w	r3, r2, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f003 0301 	and.w	r3, r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]

	return value;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <GPIO_WriteToOutputPin>:
 * @return            -  0 or 1
 *
 * @Note              -  none
 */

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
 800083c:	4613      	mov	r3, r2
 800083e:	70bb      	strb	r3, [r7, #2]

	if(Value == GPIO_PIN_SET){
 8000840:	78bb      	ldrb	r3, [r7, #2]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d109      	bne.n	800085a <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	78fa      	ldrb	r2, [r7, #3]
 800084c:	2101      	movs	r1, #1
 800084e:	fa01 f202 	lsl.w	r2, r1, r2
 8000852:	431a      	orrs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 8000858:	e009      	b.n	800086e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	78fa      	ldrb	r2, [r7, #3]
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	43d2      	mvns	r2, r2
 8000868:	401a      	ands	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	615a      	str	r2, [r3, #20]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <__libc_init_array>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	4e0d      	ldr	r6, [pc, #52]	; (80008b4 <__libc_init_array+0x38>)
 8000880:	4c0d      	ldr	r4, [pc, #52]	; (80008b8 <__libc_init_array+0x3c>)
 8000882:	1ba4      	subs	r4, r4, r6
 8000884:	10a4      	asrs	r4, r4, #2
 8000886:	2500      	movs	r5, #0
 8000888:	42a5      	cmp	r5, r4
 800088a:	d109      	bne.n	80008a0 <__libc_init_array+0x24>
 800088c:	4e0b      	ldr	r6, [pc, #44]	; (80008bc <__libc_init_array+0x40>)
 800088e:	4c0c      	ldr	r4, [pc, #48]	; (80008c0 <__libc_init_array+0x44>)
 8000890:	f000 f818 	bl	80008c4 <_init>
 8000894:	1ba4      	subs	r4, r4, r6
 8000896:	10a4      	asrs	r4, r4, #2
 8000898:	2500      	movs	r5, #0
 800089a:	42a5      	cmp	r5, r4
 800089c:	d105      	bne.n	80008aa <__libc_init_array+0x2e>
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008a4:	4798      	blx	r3
 80008a6:	3501      	adds	r5, #1
 80008a8:	e7ee      	b.n	8000888 <__libc_init_array+0xc>
 80008aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008ae:	4798      	blx	r3
 80008b0:	3501      	adds	r5, #1
 80008b2:	e7f2      	b.n	800089a <__libc_init_array+0x1e>
 80008b4:	080008dc 	.word	0x080008dc
 80008b8:	080008dc 	.word	0x080008dc
 80008bc:	080008dc 	.word	0x080008dc
 80008c0:	080008e0 	.word	0x080008e0

080008c4 <_init>:
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	bf00      	nop
 80008c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ca:	bc08      	pop	{r3}
 80008cc:	469e      	mov	lr, r3
 80008ce:	4770      	bx	lr

080008d0 <_fini>:
 80008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d2:	bf00      	nop
 80008d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008d6:	bc08      	pop	{r3}
 80008d8:	469e      	mov	lr, r3
 80008da:	4770      	bx	lr
