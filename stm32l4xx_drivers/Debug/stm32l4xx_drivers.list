
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080022e8  080022e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002390  08002390  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002390  08002390  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002390  08002390  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000068  08002400  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08002400  00020354  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d44  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000051f  00000000  00000000  00021dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  000222f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  000224a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002504  00000000  00000000  00022620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001442  00000000  00000000  00024b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a5d7  00000000  00000000  00025f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003053d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001100  00000000  00000000  000305b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080022d0 	.word	0x080022d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080022d0 	.word	0x080022d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SPI2_GPIOInits>:

void delay(void){
	for(uint32_t i=0; i<250000; i++);
}

void SPI2_GPIOInits(void){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000276:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <SPI2_GPIOInits+0x58>)
 8000278:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027a:	2302      	movs	r3, #2
 800027c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800027e:	2305      	movs	r3, #5
 8000280:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000282:	2302      	movs	r3, #2
 8000284:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000286:	2300      	movs	r3, #0
 8000288:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800028a:	2300      	movs	r3, #0
 800028c:	72fb      	strb	r3, [r7, #11]

	// Init SCL - clock pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 10;
 800028e:	230a      	movs	r3, #10
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f9b3 	bl	8000600 <GPIO_Init>

	// Init MISO pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 800029a:	230e      	movs	r3, #14
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f9ad 	bl	8000600 <GPIO_Init>

	// Init MOSI pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 80002a6:	230f      	movs	r3, #15
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f9a7 	bl	8000600 <GPIO_Init>

	// Init NSS pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 9;
 80002b2:	2309      	movs	r3, #9
 80002b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f9a1 	bl	8000600 <GPIO_Init>

}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	48000400 	.word	0x48000400

080002cc <SPI2_Inits>:

void SPI2_Inits(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0


	SPI2handle.pSPIx = SPI2;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <SPI2_Inits+0x40>)
 80002d2:	4a0f      	ldr	r2, [pc, #60]	; (8000310 <SPI2_Inits+0x44>)
 80002d4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	; (800030c <SPI2_Inits+0x40>)
 80002d8:	2201      	movs	r2, #1
 80002da:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <SPI2_Inits+0x40>)
 80002de:	2201      	movs	r2, #1
 80002e0:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // main clock is 16MHz, and we want 2MHz
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <SPI2_Inits+0x40>)
 80002e4:	2202      	movs	r2, #2
 80002e6:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_CRCL = SPI_CRCN_8BITS;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <SPI2_Inits+0x40>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ee:	4b07      	ldr	r3, [pc, #28]	; (800030c <SPI2_Inits+0x40>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <SPI2_Inits+0x40>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; // Hardware slave managment for NSS enabled
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <SPI2_Inits+0x40>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000300:	4802      	ldr	r0, [pc, #8]	; (800030c <SPI2_Inits+0x40>)
 8000302:	f000 fcc7 	bl	8000c94 <SPI_Init>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000013c 	.word	0x2000013c
 8000310:	40003800 	.word	0x40003800

08000314 <Slave_GPIO_InterruptPinInit>:

// This function configures the gpio pin over which SPI peripheral issues data available interrupt
void Slave_GPIO_InterruptPinInit(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	220c      	movs	r2, #12
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f000 ff6f 	bl	8001204 <memset>

	//this is interrupt gpio configuration
	spiIntPin.pGPIOx = GPIOB;
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <Slave_GPIO_InterruptPinInit+0x48>)
 8000328:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 800032a:	2308      	movs	r3, #8
 800032c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800032e:	2304      	movs	r3, #4
 8000330:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000336:	2301      	movs	r3, #1
 8000338:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f95f 	bl	8000600 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 8000342:	210f      	movs	r1, #15
 8000344:	2017      	movs	r0, #23
 8000346:	f000 fc07 	bl	8000b58 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800034a:	2101      	movs	r1, #1
 800034c:	2017      	movs	r0, #23
 800034e:	f000 fb7f 	bl	8000a50 <GPIO_IRQInterruptConfig>

}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	48000400 	.word	0x48000400

08000360 <main>:

int main(){
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0


	uint8_t dummy = 0xff;
 8000366:	23ff      	movs	r3, #255	; 0xff
 8000368:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800036a:	f7ff ffd3 	bl	8000314 <Slave_GPIO_InterruptPinInit>

	// This function is needed to set up and initialize SPI2 GPIO pins
	SPI2_GPIOInits();
 800036e:	f7ff ff7f 	bl	8000270 <SPI2_GPIOInits>

	// This function is needed to set up and initialize SPI2 peripheral parameters
	SPI2_Inits();
 8000372:	f7ff ffab 	bl	80002cc <SPI2_Inits>
	 * Setting SSOE = 1 makes NSS output enabled.
	 * The NSS pin is automatically managed by hardware.
	 * SPE = 1 => NSS = 0
	 * SPE = 0 => NSS = 1
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	4824      	ldr	r0, [pc, #144]	; (800040c <main+0xac>)
 800037a:	f000 fd86 	bl	8000e8a <SPI_SSOEConfig>

	// Interrupt form arduino to send message
	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	2024      	movs	r0, #36	; 0x24
 8000382:	f000 fce3 	bl	8000d4c <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 8000386:	4b22      	ldr	r3, [pc, #136]	; (8000410 <main+0xb0>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); // Wait till data is available and interrupt comes from transmitter device (slave)
 800038c:	bf00      	nop
 800038e:	4b21      	ldr	r3, [pc, #132]	; (8000414 <main+0xb4>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0fa      	beq.n	800038e <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 8000398:	2100      	movs	r1, #0
 800039a:	2017      	movs	r0, #23
 800039c:	f000 fb58 	bl	8000a50 <GPIO_IRQInterruptConfig>

		// Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003a0:	2101      	movs	r1, #1
 80003a2:	481a      	ldr	r0, [pc, #104]	; (800040c <main+0xac>)
 80003a4:	f000 fd56 	bl	8000e54 <SPI_PeripheralControl>


		while(!rcvStop)
 80003a8:	e012      	b.n	80003d0 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003aa:	bf00      	nop
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	2201      	movs	r2, #1
 80003b0:	4619      	mov	r1, r3
 80003b2:	4819      	ldr	r0, [pc, #100]	; (8000418 <main+0xb8>)
 80003b4:	f000 fd97 	bl	8000ee6 <SPI_SendDataIT>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d0f6      	beq.n	80003ac <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80003be:	bf00      	nop
 80003c0:	2201      	movs	r2, #1
 80003c2:	4916      	ldr	r1, [pc, #88]	; (800041c <main+0xbc>)
 80003c4:	4814      	ldr	r0, [pc, #80]	; (8000418 <main+0xb8>)
 80003c6:	f000 fdb1 	bl	8000f2c <SPI_ReceiveDataIT>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d0f7      	beq.n	80003c0 <main+0x60>
		while(!rcvStop)
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <main+0xb0>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0e7      	beq.n	80003aa <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80003da:	bf00      	nop
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <main+0xac>)
 80003e0:	f000 fd6e 	bl	8000ec0 <SPI_GetFlagStatus>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f8      	bne.n	80003dc <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80003ea:	2100      	movs	r1, #0
 80003ec:	4807      	ldr	r0, [pc, #28]	; (800040c <main+0xac>)
 80003ee:	f000 fd31 	bl	8000e54 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 80003f2:	490b      	ldr	r1, [pc, #44]	; (8000420 <main+0xc0>)
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <main+0xc4>)
 80003f6:	f000 ff0d 	bl	8001214 <iprintf>

		dataAvailable = 0;
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <main+0xb4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	2017      	movs	r0, #23
 8000404:	f000 fb24 	bl	8000a50 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000408:	e7bd      	b.n	8000386 <main+0x26>
 800040a:	bf00      	nop
 800040c:	40003800 	.word	0x40003800
 8000410:	20000084 	.word	0x20000084
 8000414:	20000085 	.word	0x20000085
 8000418:	2000013c 	.word	0x2000013c
 800041c:	20000138 	.word	0x20000138
 8000420:	2000015c 	.word	0x2000015c
 8000424:	080022e8 	.word	0x080022e8

08000428 <SPI2_IRQHandler>:
	return 0;
}

// Runs when a data byte is received from the peripheral over SPI
void SPI2_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <SPI2_IRQHandler+0x10>)
 800042e:	f000 fda0 	bl	8000f72 <SPI_IRQHandling>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000013c 	.word	0x2000013c

0800043c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	// In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1)
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d11f      	bne.n	800048e <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <SPI_ApplicationEventCallback+0x5c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	4910      	ldr	r1, [pc, #64]	; (8000498 <SPI_ApplicationEventCallback+0x5c>)
 8000456:	600a      	str	r2, [r1, #0]
 8000458:	4a10      	ldr	r2, [pc, #64]	; (800049c <SPI_ApplicationEventCallback+0x60>)
 800045a:	7812      	ldrb	r2, [r2, #0]
 800045c:	b2d1      	uxtb	r1, r2
 800045e:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <SPI_ApplicationEventCallback+0x64>)
 8000460:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <SPI_ApplicationEventCallback+0x60>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d004      	beq.n	8000476 <SPI_ApplicationEventCallback+0x3a>
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <SPI_ApplicationEventCallback+0x5c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000474:	d10b      	bne.n	800048e <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <SPI_ApplicationEventCallback+0x68>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <SPI_ApplicationEventCallback+0x5c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <SPI_ApplicationEventCallback+0x64>)
 8000484:	2100      	movs	r1, #0
 8000486:	54d1      	strb	r1, [r2, r3]
					i = 0;
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <SPI_ApplicationEventCallback+0x5c>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
				}
	}

}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000088 	.word	0x20000088
 800049c:	20000138 	.word	0x20000138
 80004a0:	2000015c 	.word	0x2000015c
 80004a4:	20000084 	.word	0x20000084

080004a8 <EXTI9_5_IRQHandler>:

// Slave data available interrupt handler
void EXTI9_5_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_8);
 80004ac:	2008      	movs	r0, #8
 80004ae:	f000 fb81 	bl	8000bb4 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004b2:	4b02      	ldr	r3, [pc, #8]	; (80004bc <EXTI9_5_IRQHandler+0x14>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	701a      	strb	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000085 	.word	0x20000085

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ee:	f000 fe65 	bl	80011bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f2:	f7ff ff35 	bl	8000360 <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   r0, =_estack
 80004f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000504:	08002398 	.word	0x08002398
  ldr r2, =_sbss
 8000508:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800050c:	20000354 	.word	0x20000354

08000510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_2_IRQHandler>
	...

08000514 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d156      	bne.n	80005d4 <GPIO_PeriClockControl+0xc0>
		if(pGPIOx == GPIOA){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800052e:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_EN();
		}
	}
}
 800053a:	e04b      	b.n	80005d4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOB){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a29      	ldr	r2, [pc, #164]	; (80005e4 <GPIO_PeriClockControl+0xd0>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 8000546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000548:	4a25      	ldr	r2, [pc, #148]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000550:	e040      	b.n	80005d4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOC){
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <GPIO_PeriClockControl+0xd4>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800055a:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a20      	ldr	r2, [pc, #128]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000566:	e035      	b.n	80005d4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOD){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a20      	ldr	r2, [pc, #128]	; (80005ec <GPIO_PeriClockControl+0xd8>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800057c:	e02a      	b.n	80005d4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOE){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <GPIO_PeriClockControl+0xdc>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d106      	bne.n	8000594 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000592:	e01f      	b.n	80005d4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOF){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a17      	ldr	r2, [pc, #92]	; (80005f4 <GPIO_PeriClockControl+0xe0>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800059c:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 800059e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a0:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005a8:	e014      	b.n	80005d4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOG){
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <GPIO_PeriClockControl+0xe4>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 80005b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005be:	e009      	b.n	80005d4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOH){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <GPIO_PeriClockControl+0xe8>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d105      	bne.n	80005d4 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <GPIO_PeriClockControl+0xcc>)
 80005ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	48000400 	.word	0x48000400
 80005e8:	48000800 	.word	0x48000800
 80005ec:	48000c00 	.word	0x48000c00
 80005f0:	48001000 	.word	0x48001000
 80005f4:	48001400 	.word	0x48001400
 80005f8:	48001800 	.word	0x48001800
 80005fc:	48001c00 	.word	0x48001c00

08000600 <GPIO_Init>:


//Init and De-Init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

	uint32_t temp=0; // temp register
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]

	// Enable peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2101      	movs	r1, #1
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff7e 	bl	8000514 <GPIO_PeriClockControl>

	// 1) configure the input mode

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	795b      	ldrb	r3, [r3, #5]
 800061c:	2b03      	cmp	r3, #3
 800061e:	d822      	bhi.n	8000666 <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	795b      	ldrb	r3, [r3, #5]
 8000624:	461a      	mov	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	791b      	ldrb	r3, [r3, #4]
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	2103      	movs	r1, #3
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	43db      	mvns	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	400a      	ands	r2, r1
 800064e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting register
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e140      	b.n	80008e8 <GPIO_Init+0x2e8>
	}
	else{
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	2103      	movs	r1, #3
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	43db      	mvns	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	400a      	ands	r2, r1
 8000682:	601a      	str	r2, [r3, #0]
		//pGPIOHandle->pGPIOx->MODER |= ( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // setting register


		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 32;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	f003 031f 	and.w	r3, r3, #31
 800068c:	60fb      	str	r3, [r7, #12]

		//interupt config part

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	795b      	ldrb	r3, [r3, #5]
 8000692:	2b04      	cmp	r3, #4
 8000694:	d133      	bne.n	80006fe <GPIO_Init+0xfe>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	2b1f      	cmp	r3, #31
 800069c:	d817      	bhi.n	80006ce <GPIO_Init+0xce>
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 800069e:	4b82      	ldr	r3, [pc, #520]	; (80008a8 <GPIO_Init+0x2a8>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	2101      	movs	r1, #1
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	4611      	mov	r1, r2
 80006ac:	4a7e      	ldr	r2, [pc, #504]	; (80008a8 <GPIO_Init+0x2a8>)
 80006ae:	430b      	orrs	r3, r1
 80006b0:	60d3      	str	r3, [r2, #12]

				//clear the corresponding RTSR bit
				EXTI->RTSR1 &= ~(1 << temp);
 80006b2:	4b7d      	ldr	r3, [pc, #500]	; (80008a8 <GPIO_Init+0x2a8>)
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	2101      	movs	r1, #1
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	43d2      	mvns	r2, r2
 80006c0:	4611      	mov	r1, r2
 80006c2:	4a79      	ldr	r2, [pc, #484]	; (80008a8 <GPIO_Init+0x2a8>)
 80006c4:	400b      	ands	r3, r1
 80006c6:	6093      	str	r3, [r2, #8]

				temp = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e084      	b.n	80007d8 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 80006ce:	4b76      	ldr	r3, [pc, #472]	; (80008a8 <GPIO_Init+0x2a8>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	2101      	movs	r1, #1
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	4611      	mov	r1, r2
 80006dc:	4a72      	ldr	r2, [pc, #456]	; (80008a8 <GPIO_Init+0x2a8>)
 80006de:	430b      	orrs	r3, r1
 80006e0:	6253      	str	r3, [r2, #36]	; 0x24

				//clear the corresponding RTSR bit
				EXTI->RTSR2 &= ~(1 << temp);
 80006e2:	4b71      	ldr	r3, [pc, #452]	; (80008a8 <GPIO_Init+0x2a8>)
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	2101      	movs	r1, #1
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	43d2      	mvns	r2, r2
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a6d      	ldr	r2, [pc, #436]	; (80008a8 <GPIO_Init+0x2a8>)
 80006f4:	400b      	ands	r3, r1
 80006f6:	6213      	str	r3, [r2, #32]

				temp = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e06c      	b.n	80007d8 <GPIO_Init+0x1d8>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	2b05      	cmp	r3, #5
 8000704:	d133      	bne.n	800076e <GPIO_Init+0x16e>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	2b1f      	cmp	r3, #31
 800070c:	d817      	bhi.n	800073e <GPIO_Init+0x13e>
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR1 |= (1 << temp);
 800070e:	4b66      	ldr	r3, [pc, #408]	; (80008a8 <GPIO_Init+0x2a8>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	2101      	movs	r1, #1
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	4611      	mov	r1, r2
 800071c:	4a62      	ldr	r2, [pc, #392]	; (80008a8 <GPIO_Init+0x2a8>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6093      	str	r3, [r2, #8]

				//clear the corresponding RTSR bit
				EXTI->FTSR1 &= ~(1 << temp);
 8000722:	4b61      	ldr	r3, [pc, #388]	; (80008a8 <GPIO_Init+0x2a8>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	2101      	movs	r1, #1
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a5d      	ldr	r2, [pc, #372]	; (80008a8 <GPIO_Init+0x2a8>)
 8000734:	400b      	ands	r3, r1
 8000736:	60d3      	str	r3, [r2, #12]

				temp = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	e04c      	b.n	80007d8 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR2 |= (1 << temp);
 800073e:	4b5a      	ldr	r3, [pc, #360]	; (80008a8 <GPIO_Init+0x2a8>)
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	2101      	movs	r1, #1
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a56      	ldr	r2, [pc, #344]	; (80008a8 <GPIO_Init+0x2a8>)
 800074e:	430b      	orrs	r3, r1
 8000750:	6213      	str	r3, [r2, #32]

				//clear the corresponding RTSR bit
				EXTI->FTSR2 &= ~(1 << temp);
 8000752:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <GPIO_Init+0x2a8>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	2101      	movs	r1, #1
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	fa01 f202 	lsl.w	r2, r1, r2
 800075e:	43d2      	mvns	r2, r2
 8000760:	4611      	mov	r1, r2
 8000762:	4a51      	ldr	r2, [pc, #324]	; (80008a8 <GPIO_Init+0x2a8>)
 8000764:	400b      	ands	r3, r1
 8000766:	6253      	str	r3, [r2, #36]	; 0x24

				temp = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e034      	b.n	80007d8 <GPIO_Init+0x1d8>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	2b06      	cmp	r3, #6
 8000774:	d130      	bne.n	80007d8 <GPIO_Init+0x1d8>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	2b1f      	cmp	r3, #31
 800077c:	d816      	bhi.n	80007ac <GPIO_Init+0x1ac>
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 800077e:	4b4a      	ldr	r3, [pc, #296]	; (80008a8 <GPIO_Init+0x2a8>)
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	2101      	movs	r1, #1
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	fa01 f202 	lsl.w	r2, r1, r2
 800078a:	4611      	mov	r1, r2
 800078c:	4a46      	ldr	r2, [pc, #280]	; (80008a8 <GPIO_Init+0x2a8>)
 800078e:	430b      	orrs	r3, r1
 8000790:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR1 |= (1 << temp);
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <GPIO_Init+0x2a8>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	2101      	movs	r1, #1
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	fa01 f202 	lsl.w	r2, r1, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	4a41      	ldr	r2, [pc, #260]	; (80008a8 <GPIO_Init+0x2a8>)
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6093      	str	r3, [r2, #8]

				temp = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	e015      	b.n	80007d8 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 80007ac:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <GPIO_Init+0x2a8>)
 80007ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b0:	2101      	movs	r1, #1
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	4611      	mov	r1, r2
 80007ba:	4a3b      	ldr	r2, [pc, #236]	; (80008a8 <GPIO_Init+0x2a8>)
 80007bc:	430b      	orrs	r3, r1
 80007be:	6253      	str	r3, [r2, #36]	; 0x24
				EXTI->RTSR2 |= (1 << temp);
 80007c0:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <GPIO_Init+0x2a8>)
 80007c2:	6a1b      	ldr	r3, [r3, #32]
 80007c4:	2101      	movs	r1, #1
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <GPIO_Init+0x2a8>)
 80007d0:	430b      	orrs	r3, r1
 80007d2:	6213      	str	r3, [r2, #32]

				temp = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
		}


		 //2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	089b      	lsrs	r3, r3, #2
 80007de:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	f003 0303 	and.w	r3, r3, #3
 80007e8:	72bb      	strb	r3, [r7, #10]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80007f2:	d032      	beq.n	800085a <GPIO_Init+0x25a>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <GPIO_Init+0x2ac>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d02b      	beq.n	8000856 <GPIO_Init+0x256>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <GPIO_Init+0x2b0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d024      	beq.n	8000852 <GPIO_Init+0x252>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <GPIO_Init+0x2b4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d01d      	beq.n	800084e <GPIO_Init+0x24e>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a28      	ldr	r2, [pc, #160]	; (80008b8 <GPIO_Init+0x2b8>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d016      	beq.n	800084a <GPIO_Init+0x24a>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a26      	ldr	r2, [pc, #152]	; (80008bc <GPIO_Init+0x2bc>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d00f      	beq.n	8000846 <GPIO_Init+0x246>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <GPIO_Init+0x2c0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d008      	beq.n	8000842 <GPIO_Init+0x242>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <GPIO_Init+0x2c4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <GPIO_Init+0x23e>
 800083a:	2307      	movs	r3, #7
 800083c:	e00e      	b.n	800085c <GPIO_Init+0x25c>
 800083e:	2300      	movs	r3, #0
 8000840:	e00c      	b.n	800085c <GPIO_Init+0x25c>
 8000842:	2306      	movs	r3, #6
 8000844:	e00a      	b.n	800085c <GPIO_Init+0x25c>
 8000846:	2305      	movs	r3, #5
 8000848:	e008      	b.n	800085c <GPIO_Init+0x25c>
 800084a:	2304      	movs	r3, #4
 800084c:	e006      	b.n	800085c <GPIO_Init+0x25c>
 800084e:	2303      	movs	r3, #3
 8000850:	e004      	b.n	800085c <GPIO_Init+0x25c>
 8000852:	2302      	movs	r3, #2
 8000854:	e002      	b.n	800085c <GPIO_Init+0x25c>
 8000856:	2301      	movs	r3, #1
 8000858:	e000      	b.n	800085c <GPIO_Init+0x25c>
 800085a:	2300      	movs	r3, #0
 800085c:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <GPIO_Init+0x2c8>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <GPIO_Init+0x2c8>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6613      	str	r3, [r2, #96]	; 0x60
		SYSCFG->EXTICR[temp1] = portCode << ( temp2 * 4);
 800086a:	7a7a      	ldrb	r2, [r7, #9]
 800086c:	7abb      	ldrb	r3, [r7, #10]
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	fa02 f103 	lsl.w	r1, r2, r3
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <GPIO_Init+0x2cc>)
 8000876:	7afb      	ldrb	r3, [r7, #11]
 8000878:	3302      	adds	r3, #2
 800087a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delivery using IMR - interrupt mask register

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %32;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	f003 031f 	and.w	r3, r3, #31
 8000886:	60fb      	str	r3, [r7, #12]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	2b1f      	cmp	r3, #31
 800088e:	d81f      	bhi.n	80008d0 <GPIO_Init+0x2d0>
			EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <GPIO_Init+0x2a8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	7912      	ldrb	r2, [r2, #4]
 8000898:	4611      	mov	r1, r2
 800089a:	2201      	movs	r2, #1
 800089c:	408a      	lsls	r2, r1
 800089e:	4611      	mov	r1, r2
 80008a0:	4a01      	ldr	r2, [pc, #4]	; (80008a8 <GPIO_Init+0x2a8>)
 80008a2:	430b      	orrs	r3, r1
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	e01d      	b.n	80008e4 <GPIO_Init+0x2e4>
 80008a8:	40010400 	.word	0x40010400
 80008ac:	48000400 	.word	0x48000400
 80008b0:	48000800 	.word	0x48000800
 80008b4:	48000c00 	.word	0x48000c00
 80008b8:	48001000 	.word	0x48001000
 80008bc:	48001400 	.word	0x48001400
 80008c0:	48001800 	.word	0x48001800
 80008c4:	48001c00 	.word	0x48001c00
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010000 	.word	0x40010000
		}
		else{
			EXTI->IMR2 |= 1 << temp;
 80008d0:	4b5e      	ldr	r3, [pc, #376]	; (8000a4c <GPIO_Init+0x44c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	2101      	movs	r1, #1
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a5b      	ldr	r2, [pc, #364]	; (8000a4c <GPIO_Init+0x44c>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	6193      	str	r3, [r2, #24]
		}

		temp = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
	}

	// 2) configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	799b      	ldrb	r3, [r3, #6]
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2103      	movs	r1, #3
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	4619      	mov	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	400a      	ands	r2, r1
 8000916:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // setting register
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6899      	ldr	r1, [r3, #8]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	430a      	orrs	r2, r1
 8000926:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]

	// 3) configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	79db      	ldrb	r3, [r3, #7]
 8000930:	461a      	mov	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	791b      	ldrb	r3, [r3, #4]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2103      	movs	r1, #3
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	4619      	mov	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	400a      	ands	r2, r1
 800095a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // setting register
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	68d9      	ldr	r1, [r3, #12]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	430a      	orrs	r2, r1
 800096a:	60da      	str	r2, [r3, #12]

	temp = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]

	// 4) configure the out put type - optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	791b      	ldrb	r3, [r3, #4]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing register
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	4619      	mov	r1, r3
 800098c:	2301      	movs	r3, #1
 800098e:	408b      	lsls	r3, r1
 8000990:	43db      	mvns	r3, r3
 8000992:	4619      	mov	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	400a      	ands	r2, r1
 800099a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; // setting register
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	6859      	ldr	r1, [r3, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	605a      	str	r2, [r3, #4]

	temp = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]

	// 5) configure the alt functionality

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	795b      	ldrb	r3, [r3, #5]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d145      	bne.n	8000a44 <GPIO_Init+0x444>

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	791b      	ldrb	r3, [r3, #4]
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	60fb      	str	r3, [r7, #12]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	d81d      	bhi.n	8000a06 <GPIO_Init+0x406>
			pGPIOHandle->pGPIOx->AFRL &= ~( 0xF << (4 * temp)); // clearing register
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6a1a      	ldr	r2, [r3, #32]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	210f      	movs	r1, #15
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	400a      	ands	r2, r1
 80009e4:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6a1a      	ldr	r2, [r3, #32]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7a5b      	ldrb	r3, [r3, #9]
 80009f0:	4619      	mov	r1, r3
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	4619      	mov	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	430a      	orrs	r2, r1
 8000a02:	621a      	str	r2, [r3, #32]
 8000a04:	e01c      	b.n	8000a40 <GPIO_Init+0x440>
		}
		else{
			pGPIOHandle->pGPIOx->AFRH &= ~( 0xF << (4 * temp)); // clearing register
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	210f      	movs	r1, #15
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	400a      	ands	r2, r1
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7a5b      	ldrb	r3, [r3, #9]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	fa01 f303 	lsl.w	r3, r1, r3
 8000a36:	4619      	mov	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
		}

		temp = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
	}
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40010400 	.word	0x40010400

08000a50 <GPIO_IRQInterruptConfig>:
 * @return            -  0 or 1
 *
 * @Note              -  none
 */

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	460a      	mov	r2, r1
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d133      	bne.n	8000ace <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31){
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b1f      	cmp	r3, #31
 8000a6a:	d80a      	bhi.n	8000a82 <GPIO_IRQInterruptConfig+0x32>
			//program ISER0 reg
			*NVIC_ISER0	|= (1 << IRQNumber);
 8000a6c:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <GPIO_IRQInterruptConfig+0xf0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <GPIO_IRQInterruptConfig+0xf0>)
 8000a7c:	430b      	orrs	r3, r1
 8000a7e:	6013      	str	r3, [r2, #0]
			//program ISER2 reg
			*NVIC_ICER2	|= (1 << IRQNumber % 64);
		}
	}

}
 8000a80:	e059      	b.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64){ // 32 to 64
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b1f      	cmp	r3, #31
 8000a86:	d90f      	bls.n	8000aa8 <GPIO_IRQInterruptConfig+0x58>
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8c:	d80c      	bhi.n	8000aa8 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1	|= (1 << IRQNumber % 32);
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <GPIO_IRQInterruptConfig+0xf4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	f002 021f 	and.w	r2, r2, #31
 8000a98:	2101      	movs	r1, #1
 8000a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <GPIO_IRQInterruptConfig+0xf4>)
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e046      	b.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 64 && IRQNumber < 96){
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b40      	cmp	r3, #64	; 0x40
 8000aac:	d943      	bls.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b5f      	cmp	r3, #95	; 0x5f
 8000ab2:	d840      	bhi.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2	|= (1 << IRQNumber % 64);
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <GPIO_IRQInterruptConfig+0xf8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	79fa      	ldrb	r2, [r7, #7]
 8000aba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4a20      	ldr	r2, [pc, #128]	; (8000b48 <GPIO_IRQInterruptConfig+0xf8>)
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	e033      	b.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31){
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b1f      	cmp	r3, #31
 8000ad2:	d80a      	bhi.n	8000aea <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0	|= (1 << IRQNumber);
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <GPIO_IRQInterruptConfig+0xfc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <GPIO_IRQInterruptConfig+0xfc>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	e025      	b.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64){ // 32 to 64
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b1f      	cmp	r3, #31
 8000aee:	d90f      	bls.n	8000b10 <GPIO_IRQInterruptConfig+0xc0>
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b3f      	cmp	r3, #63	; 0x3f
 8000af4:	d80c      	bhi.n	8000b10 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1	|= (1 << IRQNumber % 32);
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <GPIO_IRQInterruptConfig+0x100>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	79fa      	ldrb	r2, [r7, #7]
 8000afc:	f002 021f 	and.w	r2, r2, #31
 8000b00:	2101      	movs	r1, #1
 8000b02:	fa01 f202 	lsl.w	r2, r1, r2
 8000b06:	4611      	mov	r1, r2
 8000b08:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <GPIO_IRQInterruptConfig+0x100>)
 8000b0a:	430b      	orrs	r3, r1
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e012      	b.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 64 && IRQNumber < 96){
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b40      	cmp	r3, #64	; 0x40
 8000b14:	d90f      	bls.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b5f      	cmp	r3, #95	; 0x5f
 8000b1a:	d80c      	bhi.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2	|= (1 << IRQNumber % 64);
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <GPIO_IRQInterruptConfig+0x104>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	79fa      	ldrb	r2, [r7, #7]
 8000b22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b26:	2101      	movs	r1, #1
 8000b28:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <GPIO_IRQInterruptConfig+0x104>)
 8000b30:	430b      	orrs	r3, r1
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	e7ff      	b.n	8000b36 <GPIO_IRQInterruptConfig+0xe6>
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000e104 	.word	0xe000e104
 8000b48:	e000e108 	.word	0xe000e108
 8000b4c:	e000e180 	.word	0xe000e180
 8000b50:	e000e184 	.word	0xe000e184
 8000b54:	e000e188 	.word	0xe000e188

08000b58 <GPIO_IRQPriorityConfig>:
 *
 * @Note              -  none
 */


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	460a      	mov	r2, r1
 8000b62:	71fb      	strb	r3, [r7, #7]
 8000b64:	4613      	mov	r3, r2
 8000b66:	71bb      	strb	r3, [r7, #6]
	//1. find out ipr register
	uint8_t iprx = IRQNumber / 4;
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 *iprx_section ) + ( 8 - NO_PR_BITS_IMPLEMENTED );
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx ) |= ( IRQPriority << shift_amount );
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b88:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	79b9      	ldrb	r1, [r7, #6]
 8000b90:	7b7b      	ldrb	r3, [r7, #13]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	4619      	mov	r1, r3
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ba0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]

}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	//clear the EXTI PR register corresponding to the pin number
	uint32_t temp = PinNumber % 32;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	f003 031f 	and.w	r3, r3, #31
 8000bc4:	60fb      	str	r3, [r7, #12]

	if(PinNumber < 32){
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b1f      	cmp	r3, #31
 8000bca:	d813      	bhi.n	8000bf4 <GPIO_IRQHandling+0x40>
		if(EXTI->PR1 & ( 1 << temp ) ){
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <GPIO_IRQHandling+0x70>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d01d      	beq.n	8000c1a <GPIO_IRQHandling+0x66>
			//clear
			EXTI->PR1 |= ( 1 << temp );
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <GPIO_IRQHandling+0x70>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	2101      	movs	r1, #1
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <GPIO_IRQHandling+0x70>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6153      	str	r3, [r2, #20]
			//clear
			EXTI->PR2 |= ( 1 << temp );
		}
	}

}
 8000bf2:	e012      	b.n	8000c1a <GPIO_IRQHandling+0x66>
		if(EXTI->PR2 & ( 1 << temp ) ){
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <GPIO_IRQHandling+0x70>)
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <GPIO_IRQHandling+0x66>
			EXTI->PR2 |= ( 1 << temp );
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <GPIO_IRQHandling+0x70>)
 8000c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	4611      	mov	r1, r2
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <GPIO_IRQHandling+0x70>)
 8000c16:	430b      	orrs	r3, r1
 8000c18:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40010400 	.word	0x40010400

08000c28 <SPI_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d11f      	bne.n	8000c7a <SPI_PeriClockControl+0x52>
		if(pSPIx == SPI1){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <SPI_PeriClockControl+0x5c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d106      	bne.n	8000c50 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <SPI_PeriClockControl+0x60>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <SPI_PeriClockControl+0x60>)
 8000c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c4c:	6613      	str	r3, [r2, #96]	; 0x60
		}
		else if(pSPIx == SPI3){
			SPI3_PCLK_EN();
		}
	}
}
 8000c4e:	e014      	b.n	8000c7a <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI2){
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <SPI_PeriClockControl+0x64>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d106      	bne.n	8000c66 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <SPI_PeriClockControl+0x60>)
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <SPI_PeriClockControl+0x60>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000c64:	e009      	b.n	8000c7a <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI3){
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <SPI_PeriClockControl+0x68>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d105      	bne.n	8000c7a <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SPI_PeriClockControl+0x60>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SPI_PeriClockControl+0x60>)
 8000c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40003800 	.word	0x40003800
 8000c90:	40003c00 	.word	0x40003c00

08000c94 <SPI_Init>:


//Init and De-Init
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

		// Enable peripheral clock

		SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ffc0 	bl	8000c28 <SPI_PeriClockControl>

		// first configure the SPI_CR1 reg

		uint32_t tempreg = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]

		// 1. configure the device mode
		tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	791b      	ldrb	r3, [r3, #4]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]

		// 2. configure the bus config
		if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d104      	bne.n	8000ccc <SPI_Init+0x38>
			//BIDI mode should be cleared
			tempreg &= ~( 1 << 15);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e014      	b.n	8000cf6 <SPI_Init+0x62>
		}
		else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	795b      	ldrb	r3, [r3, #5]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d104      	bne.n	8000cde <SPI_Init+0x4a>
			//BIDI mode should be set
			tempreg |= ( 1 << 15);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	e00b      	b.n	8000cf6 <SPI_Init+0x62>
		}
		else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	795b      	ldrb	r3, [r3, #5]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d107      	bne.n	8000cf6 <SPI_Init+0x62>
			//BIDI mode should be cleared
			tempreg &= ~( 1 << 15);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cec:	60fb      	str	r3, [r7, #12]
			//RXONLY bit must be set
			tempreg |= ( 1 << 10);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf4:	60fb      	str	r3, [r7, #12]
		}

		// 3. configure the SPI serial clock speed (baud rate)
		tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	799b      	ldrb	r3, [r3, #6]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

		// 4. configure the CRCL (DFF)
		tempreg |= pSPIHandle->SPIConfig.SPI_CRCL << SPI_CR1_CRCL;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	79db      	ldrb	r3, [r3, #7]
 8000d08:	02db      	lsls	r3, r3, #11
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]

		// 5. configure the CPOL
		tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7a1b      	ldrb	r3, [r3, #8]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	461a      	mov	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

		// 6. configure the CPHA
		tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7a5b      	ldrb	r3, [r3, #9]
 8000d24:	461a      	mov	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

		tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7a9b      	ldrb	r3, [r3, #10]
 8000d30:	025b      	lsls	r3, r3, #9
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]

		// all the necessary bits are set in the CR1 register
		pSPIHandle->pSPIx->CR1 = tempreg;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <SPI_IRQInterruptConfig>:
 * @return            -  0 or 1
 *
 * @Note              -  none
 */

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE){
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d133      	bne.n	8000dca <SPI_IRQInterruptConfig+0x7e>
		if (IRQNumber <= 31){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b1f      	cmp	r3, #31
 8000d66:	d80a      	bhi.n	8000d7e <SPI_IRQInterruptConfig+0x32>
			//program ISER0 reg
			*NVIC_ISER0	|= (1 << IRQNumber);
 8000d68:	4b34      	ldr	r3, [pc, #208]	; (8000e3c <SPI_IRQInterruptConfig+0xf0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	4611      	mov	r1, r2
 8000d76:	4a31      	ldr	r2, [pc, #196]	; (8000e3c <SPI_IRQInterruptConfig+0xf0>)
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6013      	str	r3, [r2, #0]
		else if (IRQNumber > 64 && IRQNumber < 96){
			//program ISER2 reg
			*NVIC_ICER2	|= (1 << IRQNumber % 64);
		}
	}
}
 8000d7c:	e059      	b.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64){ // 32 to 64
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b1f      	cmp	r3, #31
 8000d82:	d90f      	bls.n	8000da4 <SPI_IRQInterruptConfig+0x58>
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b3f      	cmp	r3, #63	; 0x3f
 8000d88:	d80c      	bhi.n	8000da4 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1	|= (1 << IRQNumber % 32);
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <SPI_IRQInterruptConfig+0xf4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	f002 021f 	and.w	r2, r2, #31
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <SPI_IRQInterruptConfig+0xf4>)
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e046      	b.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 64 && IRQNumber < 96){
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b40      	cmp	r3, #64	; 0x40
 8000da8:	d943      	bls.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	2b5f      	cmp	r3, #95	; 0x5f
 8000dae:	d840      	bhi.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER2	|= (1 << IRQNumber % 64);
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <SPI_IRQInterruptConfig+0xf8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	79fa      	ldrb	r2, [r7, #7]
 8000db6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <SPI_IRQInterruptConfig+0xf8>)
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	e033      	b.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31){
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b1f      	cmp	r3, #31
 8000dce:	d80a      	bhi.n	8000de6 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0	|= (1 << IRQNumber);
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <SPI_IRQInterruptConfig+0xfc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	79fa      	ldrb	r2, [r7, #7]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <SPI_IRQInterruptConfig+0xfc>)
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	e025      	b.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64){ // 32 to 64
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b1f      	cmp	r3, #31
 8000dea:	d90f      	bls.n	8000e0c <SPI_IRQInterruptConfig+0xc0>
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b3f      	cmp	r3, #63	; 0x3f
 8000df0:	d80c      	bhi.n	8000e0c <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1	|= (1 << IRQNumber % 32);
 8000df2:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <SPI_IRQInterruptConfig+0x100>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	79fa      	ldrb	r2, [r7, #7]
 8000df8:	f002 021f 	and.w	r2, r2, #31
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	4611      	mov	r1, r2
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <SPI_IRQInterruptConfig+0x100>)
 8000e06:	430b      	orrs	r3, r1
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e012      	b.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 64 && IRQNumber < 96){
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b40      	cmp	r3, #64	; 0x40
 8000e10:	d90f      	bls.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b5f      	cmp	r3, #95	; 0x5f
 8000e16:	d80c      	bhi.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER2	|= (1 << IRQNumber % 64);
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <SPI_IRQInterruptConfig+0x104>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <SPI_IRQInterruptConfig+0x104>)
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	e7ff      	b.n	8000e32 <SPI_IRQInterruptConfig+0xe6>
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000e104 	.word	0xe000e104
 8000e44:	e000e108 	.word	0xe000e108
 8000e48:	e000e180 	.word	0xe000e180
 8000e4c:	e000e184 	.word	0xe000e184
 8000e50:	e000e188 	.word	0xe000e188

08000e54 <SPI_PeripheralControl>:

	uint8_t shift_amount = ( 8 *iprx_section ) + ( 8 - NO_PR_BITS_IMPLEMENTED );
	*(NVIC_PR_BASE_ADDR + iprx ) |= ( IRQPriority << shift_amount );
}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d106      	bne.n	8000e74 <SPI_PeripheralControl+0x20>
		pSPIx->CR1  |= (1 << SPI_CR1_SPE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
	}
}
 8000e72:	e005      	b.n	8000e80 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1  &= ~(1 << SPI_CR1_SPE);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <SPI_SSOEConfig>:
	}


}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	460b      	mov	r3, r1
 8000e94:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE){
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <SPI_SSOEConfig+0x20>
		pSPIx->CR2  |= (1 << SPI_CR2_SSOE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f043 0204 	orr.w	r2, r3, #4
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	605a      	str	r2, [r3, #4]
	else{
		pSPIx->CR2  &= ~(1 << SPI_CR2_SSOE);
	}


}
 8000ea8:	e005      	b.n	8000eb6 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2  &= ~(1 << SPI_CR2_SSOE);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f023 0204 	bic.w	r2, r3, #4
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	605a      	str	r2, [r3, #4]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <SPI_SendDataIT>:

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTXBuffer, uint32_t Len){
 8000ee6:	b480      	push	{r7}
 8000ee8:	b087      	sub	sp, #28
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->TXState;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	7f1b      	ldrb	r3, [r3, #28]
 8000ef6:	75fb      	strb	r3, [r7, #23]

	if( state != SPI_BUSY_IN_TX){
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d010      	beq.n	8000f20 <SPI_SendDataIT+0x3a>
		// 1
		pSPIHandle->pTXBuffer = pTXBuffer;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	60da      	str	r2, [r3, #12]
		pSPIHandle->TXLen = Len;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	615a      	str	r2, [r3, #20]

		// 2
		pSPIHandle->TXState = SPI_BUSY_IN_TX;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	771a      	strb	r2, [r3, #28]

		// 3
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f1e:	605a      	str	r2, [r3, #4]
	}
	// 4

	return state;
 8000f20:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f22:	4618      	mov	r0, r3
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SPI_ReceiveDataIT>:

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRXBuffer, uint32_t Len){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]

	uint8_t state = pSPIHandle->RXState;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	7f5b      	ldrb	r3, [r3, #29]
 8000f3c:	75fb      	strb	r3, [r7, #23]

	if( state != SPI_BUSY_IN_RX){
 8000f3e:	7dfb      	ldrb	r3, [r7, #23]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d010      	beq.n	8000f66 <SPI_ReceiveDataIT+0x3a>
		// 1
		pSPIHandle->pRXBuffer = pRXBuffer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	611a      	str	r2, [r3, #16]
		pSPIHandle->RXLen = Len;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]

		// 2
		pSPIHandle->RXState = SPI_BUSY_IN_RX;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	775a      	strb	r2, [r3, #29]

		// 3
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f64:	605a      	str	r2, [r3, #4]
	}
	// 4

	return state;
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <SPI_IRQHandling>:

void SPI_IRQHandling(SPI_Handle_t *pHandle){
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]

	uint8_t temp1, temp2;
	// Check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE ); // check if SR 1 possiton to the left is same with 1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE );
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f94:	73bb      	strb	r3, [r7, #14]

	if ( temp1 && temp2){
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <SPI_IRQHandling+0x36>
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <SPI_IRQHandling+0x36>

		// Handle_TXE
		spi_txe_interrupt_handle(pHandle);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f832 	bl	800100c <spi_txe_interrupt_handle>
	}

	// Check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE ); // check if SR 1 possiton to the left is same with 0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE );
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	73bb      	strb	r3, [r7, #14]

	if ( temp1 && temp2){
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d005      	beq.n	8000fd6 <SPI_IRQHandling+0x64>
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <SPI_IRQHandling+0x64>

		// Handle_RXNE
		spi_rxne_interrupt_handle(pHandle);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f864 	bl	800109e <spi_rxne_interrupt_handle>
	}

	// Check for OVR flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR ); // check if SR 1 possiton to the left is same with 0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe2:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f003 0320 	and.w	r3, r3, #32
 8000ff0:	73bb      	strb	r3, [r7, #14]

	if ( temp1 && temp2){
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <SPI_IRQHandling+0x92>
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <SPI_IRQHandling+0x92>

		// Handle_RXNE
		spi_ovr_err_interrupt_handle(pHandle);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f88f 	bl	8001122 <spi_ovr_err_interrupt_handle>
	}

}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <spi_txe_interrupt_handle>:

// Some helper function implemantion

static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	// check the DFF bit
		if(pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_CRCL ) ){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800101e:	2b00      	cmp	r3, #0
 8001020:	d015      	beq.n	800104e <spi_txe_interrupt_handle+0x42>
			// 16 bit CRCL

			// 1. load the data in to the DR
			pSPIHandle->pSPIx->DR = *( (uint16_t*) pSPIHandle->pTXBuffer);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60da      	str	r2, [r3, #12]

			pSPIHandle->TXLen--;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	615a      	str	r2, [r3, #20]
			pSPIHandle->TXLen--;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	615a      	str	r2, [r3, #20]

			(uint16_t*) pSPIHandle->pTXBuffer++;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	e018      	b.n	8001080 <spi_txe_interrupt_handle+0x74>
		}
		else{
			// 8 bit CRCL

			*((uint8_t*) &pSPIHandle->pSPIx->DR) = *(pSPIHandle->pTXBuffer);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	330c      	adds	r3, #12
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	701a      	strb	r2, [r3, #0]
			pSPIHandle->pSPIx->CR2 |= ( 1 << 12 );
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800106a:	605a      	str	r2, [r3, #4]
			pSPIHandle->TXLen--;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	1e5a      	subs	r2, r3, #1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	615a      	str	r2, [r3, #20]
			pSPIHandle->pTXBuffer++;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60da      	str	r2, [r3, #12]
		}

		if( !pSPIHandle->TXLen ){
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d106      	bne.n	8001096 <spi_txe_interrupt_handle+0x8a>

			SPI_CloseTransmission(pSPIHandle);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f862 	bl	8001152 <SPI_CloseTransmission>
			SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 800108e:	2101      	movs	r1, #1
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff f9d3 	bl	800043c <SPI_ApplicationEventCallback>
		}

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <spi_rxne_interrupt_handle>:
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]

	// Check the DFF bit
		if(pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_CRCL ) ){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d016      	beq.n	80010e2 <spi_rxne_interrupt_handle+0x44>
			// 16 bit CRCL

			// 1. load the data in to the DR from RXbuffer address
			*( (uint16_t*) pSPIHandle->pTXBuffer) = pSPIHandle->pSPIx->DR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	b292      	uxth	r2, r2
 80010c0:	801a      	strh	r2, [r3, #0]

			pSPIHandle->RXLen--;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
			pSPIHandle->RXLen--;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]

			(uint16_t*) pSPIHandle->pRXBuffer++;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	e010      	b.n	8001104 <spi_rxne_interrupt_handle+0x66>
		}
		else{
			// 8 bit CRCL

			*(pSPIHandle->pRXBuffer) = pSPIHandle->pSPIx->DR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
			pSPIHandle->RXLen--;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	1e5a      	subs	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
			pSPIHandle->pRXBuffer++;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	611a      	str	r2, [r3, #16]
		}

		if( !pSPIHandle->RXLen ){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <spi_rxne_interrupt_handle+0x7c>

			SPI_CloseReception(pSPIHandle);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f83a 	bl	8001186 <SPI_CloseReception>
			SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 8001112:	2102      	movs	r1, #2
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f991 	bl	800043c <SPI_ApplicationEventCallback>
		}
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <spi_ovr_err_interrupt_handle>:

static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle){
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	// 1. clear the ovr flag
	if(pSPIHandle->TXState != SPI_BUSY_IN_TX){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7f1b      	ldrb	r3, [r3, #28]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d007      	beq.n	8001142 <spi_ovr_err_interrupt_handle+0x20>

		temp = pSPIHandle->pSPIx->DR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;

	// 2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 8001142:	2103      	movs	r1, #3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f979 	bl	800043c <SPI_ApplicationEventCallback>

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <SPI_CloseTransmission>:

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]

	pSPIHandle->pSPIx->CR2 &= ~ ( 1 << SPI_CR2_TXEIE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001168:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTXBuffer = NULL;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
	pSPIHandle->TXLen = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
	pSPIHandle->TXState = SPI_READY;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]

	pSPIHandle->pSPIx->CR2 &= ~ ( 1 << SPI_CR2_RXNEIE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800119c:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRXBuffer = NULL;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
	pSPIHandle->RXLen = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
	pSPIHandle->RXState = SPI_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
	...

080011bc <__libc_init_array>:
 80011bc:	b570      	push	{r4, r5, r6, lr}
 80011be:	4e0d      	ldr	r6, [pc, #52]	; (80011f4 <__libc_init_array+0x38>)
 80011c0:	4c0d      	ldr	r4, [pc, #52]	; (80011f8 <__libc_init_array+0x3c>)
 80011c2:	1ba4      	subs	r4, r4, r6
 80011c4:	10a4      	asrs	r4, r4, #2
 80011c6:	2500      	movs	r5, #0
 80011c8:	42a5      	cmp	r5, r4
 80011ca:	d109      	bne.n	80011e0 <__libc_init_array+0x24>
 80011cc:	4e0b      	ldr	r6, [pc, #44]	; (80011fc <__libc_init_array+0x40>)
 80011ce:	4c0c      	ldr	r4, [pc, #48]	; (8001200 <__libc_init_array+0x44>)
 80011d0:	f001 f87e 	bl	80022d0 <_init>
 80011d4:	1ba4      	subs	r4, r4, r6
 80011d6:	10a4      	asrs	r4, r4, #2
 80011d8:	2500      	movs	r5, #0
 80011da:	42a5      	cmp	r5, r4
 80011dc:	d105      	bne.n	80011ea <__libc_init_array+0x2e>
 80011de:	bd70      	pop	{r4, r5, r6, pc}
 80011e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011e4:	4798      	blx	r3
 80011e6:	3501      	adds	r5, #1
 80011e8:	e7ee      	b.n	80011c8 <__libc_init_array+0xc>
 80011ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ee:	4798      	blx	r3
 80011f0:	3501      	adds	r5, #1
 80011f2:	e7f2      	b.n	80011da <__libc_init_array+0x1e>
 80011f4:	08002390 	.word	0x08002390
 80011f8:	08002390 	.word	0x08002390
 80011fc:	08002390 	.word	0x08002390
 8001200:	08002394 	.word	0x08002394

08001204 <memset>:
 8001204:	4402      	add	r2, r0
 8001206:	4603      	mov	r3, r0
 8001208:	4293      	cmp	r3, r2
 800120a:	d100      	bne.n	800120e <memset+0xa>
 800120c:	4770      	bx	lr
 800120e:	f803 1b01 	strb.w	r1, [r3], #1
 8001212:	e7f9      	b.n	8001208 <memset+0x4>

08001214 <iprintf>:
 8001214:	b40f      	push	{r0, r1, r2, r3}
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <iprintf+0x2c>)
 8001218:	b513      	push	{r0, r1, r4, lr}
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	b124      	cbz	r4, 8001228 <iprintf+0x14>
 800121e:	69a3      	ldr	r3, [r4, #24]
 8001220:	b913      	cbnz	r3, 8001228 <iprintf+0x14>
 8001222:	4620      	mov	r0, r4
 8001224:	f000 f84e 	bl	80012c4 <__sinit>
 8001228:	ab05      	add	r3, sp, #20
 800122a:	9a04      	ldr	r2, [sp, #16]
 800122c:	68a1      	ldr	r1, [r4, #8]
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	4620      	mov	r0, r4
 8001232:	f000 f953 	bl	80014dc <_vfiprintf_r>
 8001236:	b002      	add	sp, #8
 8001238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800123c:	b004      	add	sp, #16
 800123e:	4770      	bx	lr
 8001240:	20000000 	.word	0x20000000

08001244 <std>:
 8001244:	2300      	movs	r3, #0
 8001246:	b510      	push	{r4, lr}
 8001248:	4604      	mov	r4, r0
 800124a:	e9c0 3300 	strd	r3, r3, [r0]
 800124e:	6083      	str	r3, [r0, #8]
 8001250:	8181      	strh	r1, [r0, #12]
 8001252:	6643      	str	r3, [r0, #100]	; 0x64
 8001254:	81c2      	strh	r2, [r0, #14]
 8001256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800125a:	6183      	str	r3, [r0, #24]
 800125c:	4619      	mov	r1, r3
 800125e:	2208      	movs	r2, #8
 8001260:	305c      	adds	r0, #92	; 0x5c
 8001262:	f7ff ffcf 	bl	8001204 <memset>
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <std+0x38>)
 8001268:	6263      	str	r3, [r4, #36]	; 0x24
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <std+0x3c>)
 800126c:	62a3      	str	r3, [r4, #40]	; 0x28
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <std+0x40>)
 8001270:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <std+0x44>)
 8001274:	6224      	str	r4, [r4, #32]
 8001276:	6323      	str	r3, [r4, #48]	; 0x30
 8001278:	bd10      	pop	{r4, pc}
 800127a:	bf00      	nop
 800127c:	08001a39 	.word	0x08001a39
 8001280:	08001a5b 	.word	0x08001a5b
 8001284:	08001a93 	.word	0x08001a93
 8001288:	08001ab7 	.word	0x08001ab7

0800128c <_cleanup_r>:
 800128c:	4901      	ldr	r1, [pc, #4]	; (8001294 <_cleanup_r+0x8>)
 800128e:	f000 b885 	b.w	800139c <_fwalk_reent>
 8001292:	bf00      	nop
 8001294:	08001d91 	.word	0x08001d91

08001298 <__sfmoreglue>:
 8001298:	b570      	push	{r4, r5, r6, lr}
 800129a:	1e4a      	subs	r2, r1, #1
 800129c:	2568      	movs	r5, #104	; 0x68
 800129e:	4355      	muls	r5, r2
 80012a0:	460e      	mov	r6, r1
 80012a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80012a6:	f000 f897 	bl	80013d8 <_malloc_r>
 80012aa:	4604      	mov	r4, r0
 80012ac:	b140      	cbz	r0, 80012c0 <__sfmoreglue+0x28>
 80012ae:	2100      	movs	r1, #0
 80012b0:	e9c0 1600 	strd	r1, r6, [r0]
 80012b4:	300c      	adds	r0, #12
 80012b6:	60a0      	str	r0, [r4, #8]
 80012b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80012bc:	f7ff ffa2 	bl	8001204 <memset>
 80012c0:	4620      	mov	r0, r4
 80012c2:	bd70      	pop	{r4, r5, r6, pc}

080012c4 <__sinit>:
 80012c4:	6983      	ldr	r3, [r0, #24]
 80012c6:	b510      	push	{r4, lr}
 80012c8:	4604      	mov	r4, r0
 80012ca:	bb33      	cbnz	r3, 800131a <__sinit+0x56>
 80012cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80012d0:	6503      	str	r3, [r0, #80]	; 0x50
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <__sinit+0x58>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <__sinit+0x5c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6282      	str	r2, [r0, #40]	; 0x28
 80012da:	4298      	cmp	r0, r3
 80012dc:	bf04      	itt	eq
 80012de:	2301      	moveq	r3, #1
 80012e0:	6183      	streq	r3, [r0, #24]
 80012e2:	f000 f81f 	bl	8001324 <__sfp>
 80012e6:	6060      	str	r0, [r4, #4]
 80012e8:	4620      	mov	r0, r4
 80012ea:	f000 f81b 	bl	8001324 <__sfp>
 80012ee:	60a0      	str	r0, [r4, #8]
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 f817 	bl	8001324 <__sfp>
 80012f6:	2200      	movs	r2, #0
 80012f8:	60e0      	str	r0, [r4, #12]
 80012fa:	2104      	movs	r1, #4
 80012fc:	6860      	ldr	r0, [r4, #4]
 80012fe:	f7ff ffa1 	bl	8001244 <std>
 8001302:	2201      	movs	r2, #1
 8001304:	2109      	movs	r1, #9
 8001306:	68a0      	ldr	r0, [r4, #8]
 8001308:	f7ff ff9c 	bl	8001244 <std>
 800130c:	2202      	movs	r2, #2
 800130e:	2112      	movs	r1, #18
 8001310:	68e0      	ldr	r0, [r4, #12]
 8001312:	f7ff ff97 	bl	8001244 <std>
 8001316:	2301      	movs	r3, #1
 8001318:	61a3      	str	r3, [r4, #24]
 800131a:	bd10      	pop	{r4, pc}
 800131c:	080022f8 	.word	0x080022f8
 8001320:	0800128d 	.word	0x0800128d

08001324 <__sfp>:
 8001324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <__sfp+0x70>)
 8001328:	681e      	ldr	r6, [r3, #0]
 800132a:	69b3      	ldr	r3, [r6, #24]
 800132c:	4607      	mov	r7, r0
 800132e:	b913      	cbnz	r3, 8001336 <__sfp+0x12>
 8001330:	4630      	mov	r0, r6
 8001332:	f7ff ffc7 	bl	80012c4 <__sinit>
 8001336:	3648      	adds	r6, #72	; 0x48
 8001338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800133c:	3b01      	subs	r3, #1
 800133e:	d503      	bpl.n	8001348 <__sfp+0x24>
 8001340:	6833      	ldr	r3, [r6, #0]
 8001342:	b133      	cbz	r3, 8001352 <__sfp+0x2e>
 8001344:	6836      	ldr	r6, [r6, #0]
 8001346:	e7f7      	b.n	8001338 <__sfp+0x14>
 8001348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800134c:	b16d      	cbz	r5, 800136a <__sfp+0x46>
 800134e:	3468      	adds	r4, #104	; 0x68
 8001350:	e7f4      	b.n	800133c <__sfp+0x18>
 8001352:	2104      	movs	r1, #4
 8001354:	4638      	mov	r0, r7
 8001356:	f7ff ff9f 	bl	8001298 <__sfmoreglue>
 800135a:	6030      	str	r0, [r6, #0]
 800135c:	2800      	cmp	r0, #0
 800135e:	d1f1      	bne.n	8001344 <__sfp+0x20>
 8001360:	230c      	movs	r3, #12
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4604      	mov	r4, r0
 8001366:	4620      	mov	r0, r4
 8001368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <__sfp+0x74>)
 800136c:	6665      	str	r5, [r4, #100]	; 0x64
 800136e:	e9c4 5500 	strd	r5, r5, [r4]
 8001372:	60a5      	str	r5, [r4, #8]
 8001374:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001378:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800137c:	2208      	movs	r2, #8
 800137e:	4629      	mov	r1, r5
 8001380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001384:	f7ff ff3e 	bl	8001204 <memset>
 8001388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800138c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001390:	e7e9      	b.n	8001366 <__sfp+0x42>
 8001392:	bf00      	nop
 8001394:	080022f8 	.word	0x080022f8
 8001398:	ffff0001 	.word	0xffff0001

0800139c <_fwalk_reent>:
 800139c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013a0:	4680      	mov	r8, r0
 80013a2:	4689      	mov	r9, r1
 80013a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80013a8:	2600      	movs	r6, #0
 80013aa:	b914      	cbnz	r4, 80013b2 <_fwalk_reent+0x16>
 80013ac:	4630      	mov	r0, r6
 80013ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80013b6:	3f01      	subs	r7, #1
 80013b8:	d501      	bpl.n	80013be <_fwalk_reent+0x22>
 80013ba:	6824      	ldr	r4, [r4, #0]
 80013bc:	e7f5      	b.n	80013aa <_fwalk_reent+0xe>
 80013be:	89ab      	ldrh	r3, [r5, #12]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d907      	bls.n	80013d4 <_fwalk_reent+0x38>
 80013c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013c8:	3301      	adds	r3, #1
 80013ca:	d003      	beq.n	80013d4 <_fwalk_reent+0x38>
 80013cc:	4629      	mov	r1, r5
 80013ce:	4640      	mov	r0, r8
 80013d0:	47c8      	blx	r9
 80013d2:	4306      	orrs	r6, r0
 80013d4:	3568      	adds	r5, #104	; 0x68
 80013d6:	e7ee      	b.n	80013b6 <_fwalk_reent+0x1a>

080013d8 <_malloc_r>:
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	1ccd      	adds	r5, r1, #3
 80013dc:	f025 0503 	bic.w	r5, r5, #3
 80013e0:	3508      	adds	r5, #8
 80013e2:	2d0c      	cmp	r5, #12
 80013e4:	bf38      	it	cc
 80013e6:	250c      	movcc	r5, #12
 80013e8:	2d00      	cmp	r5, #0
 80013ea:	4606      	mov	r6, r0
 80013ec:	db01      	blt.n	80013f2 <_malloc_r+0x1a>
 80013ee:	42a9      	cmp	r1, r5
 80013f0:	d903      	bls.n	80013fa <_malloc_r+0x22>
 80013f2:	230c      	movs	r3, #12
 80013f4:	6033      	str	r3, [r6, #0]
 80013f6:	2000      	movs	r0, #0
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
 80013fa:	f000 fd69 	bl	8001ed0 <__malloc_lock>
 80013fe:	4a21      	ldr	r2, [pc, #132]	; (8001484 <_malloc_r+0xac>)
 8001400:	6814      	ldr	r4, [r2, #0]
 8001402:	4621      	mov	r1, r4
 8001404:	b991      	cbnz	r1, 800142c <_malloc_r+0x54>
 8001406:	4c20      	ldr	r4, [pc, #128]	; (8001488 <_malloc_r+0xb0>)
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	b91b      	cbnz	r3, 8001414 <_malloc_r+0x3c>
 800140c:	4630      	mov	r0, r6
 800140e:	f000 fb03 	bl	8001a18 <_sbrk_r>
 8001412:	6020      	str	r0, [r4, #0]
 8001414:	4629      	mov	r1, r5
 8001416:	4630      	mov	r0, r6
 8001418:	f000 fafe 	bl	8001a18 <_sbrk_r>
 800141c:	1c43      	adds	r3, r0, #1
 800141e:	d124      	bne.n	800146a <_malloc_r+0x92>
 8001420:	230c      	movs	r3, #12
 8001422:	6033      	str	r3, [r6, #0]
 8001424:	4630      	mov	r0, r6
 8001426:	f000 fd54 	bl	8001ed2 <__malloc_unlock>
 800142a:	e7e4      	b.n	80013f6 <_malloc_r+0x1e>
 800142c:	680b      	ldr	r3, [r1, #0]
 800142e:	1b5b      	subs	r3, r3, r5
 8001430:	d418      	bmi.n	8001464 <_malloc_r+0x8c>
 8001432:	2b0b      	cmp	r3, #11
 8001434:	d90f      	bls.n	8001456 <_malloc_r+0x7e>
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	50cd      	str	r5, [r1, r3]
 800143a:	18cc      	adds	r4, r1, r3
 800143c:	4630      	mov	r0, r6
 800143e:	f000 fd48 	bl	8001ed2 <__malloc_unlock>
 8001442:	f104 000b 	add.w	r0, r4, #11
 8001446:	1d23      	adds	r3, r4, #4
 8001448:	f020 0007 	bic.w	r0, r0, #7
 800144c:	1ac3      	subs	r3, r0, r3
 800144e:	d0d3      	beq.n	80013f8 <_malloc_r+0x20>
 8001450:	425a      	negs	r2, r3
 8001452:	50e2      	str	r2, [r4, r3]
 8001454:	e7d0      	b.n	80013f8 <_malloc_r+0x20>
 8001456:	428c      	cmp	r4, r1
 8001458:	684b      	ldr	r3, [r1, #4]
 800145a:	bf16      	itet	ne
 800145c:	6063      	strne	r3, [r4, #4]
 800145e:	6013      	streq	r3, [r2, #0]
 8001460:	460c      	movne	r4, r1
 8001462:	e7eb      	b.n	800143c <_malloc_r+0x64>
 8001464:	460c      	mov	r4, r1
 8001466:	6849      	ldr	r1, [r1, #4]
 8001468:	e7cc      	b.n	8001404 <_malloc_r+0x2c>
 800146a:	1cc4      	adds	r4, r0, #3
 800146c:	f024 0403 	bic.w	r4, r4, #3
 8001470:	42a0      	cmp	r0, r4
 8001472:	d005      	beq.n	8001480 <_malloc_r+0xa8>
 8001474:	1a21      	subs	r1, r4, r0
 8001476:	4630      	mov	r0, r6
 8001478:	f000 face 	bl	8001a18 <_sbrk_r>
 800147c:	3001      	adds	r0, #1
 800147e:	d0cf      	beq.n	8001420 <_malloc_r+0x48>
 8001480:	6025      	str	r5, [r4, #0]
 8001482:	e7db      	b.n	800143c <_malloc_r+0x64>
 8001484:	2000008c 	.word	0x2000008c
 8001488:	20000090 	.word	0x20000090

0800148c <__sfputc_r>:
 800148c:	6893      	ldr	r3, [r2, #8]
 800148e:	3b01      	subs	r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	b410      	push	{r4}
 8001494:	6093      	str	r3, [r2, #8]
 8001496:	da07      	bge.n	80014a8 <__sfputc_r+0x1c>
 8001498:	6994      	ldr	r4, [r2, #24]
 800149a:	42a3      	cmp	r3, r4
 800149c:	db01      	blt.n	80014a2 <__sfputc_r+0x16>
 800149e:	290a      	cmp	r1, #10
 80014a0:	d102      	bne.n	80014a8 <__sfputc_r+0x1c>
 80014a2:	bc10      	pop	{r4}
 80014a4:	f000 bb0c 	b.w	8001ac0 <__swbuf_r>
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	1c58      	adds	r0, r3, #1
 80014ac:	6010      	str	r0, [r2, #0]
 80014ae:	7019      	strb	r1, [r3, #0]
 80014b0:	4608      	mov	r0, r1
 80014b2:	bc10      	pop	{r4}
 80014b4:	4770      	bx	lr

080014b6 <__sfputs_r>:
 80014b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b8:	4606      	mov	r6, r0
 80014ba:	460f      	mov	r7, r1
 80014bc:	4614      	mov	r4, r2
 80014be:	18d5      	adds	r5, r2, r3
 80014c0:	42ac      	cmp	r4, r5
 80014c2:	d101      	bne.n	80014c8 <__sfputs_r+0x12>
 80014c4:	2000      	movs	r0, #0
 80014c6:	e007      	b.n	80014d8 <__sfputs_r+0x22>
 80014c8:	463a      	mov	r2, r7
 80014ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ce:	4630      	mov	r0, r6
 80014d0:	f7ff ffdc 	bl	800148c <__sfputc_r>
 80014d4:	1c43      	adds	r3, r0, #1
 80014d6:	d1f3      	bne.n	80014c0 <__sfputs_r+0xa>
 80014d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080014dc <_vfiprintf_r>:
 80014dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e0:	460c      	mov	r4, r1
 80014e2:	b09d      	sub	sp, #116	; 0x74
 80014e4:	4617      	mov	r7, r2
 80014e6:	461d      	mov	r5, r3
 80014e8:	4606      	mov	r6, r0
 80014ea:	b118      	cbz	r0, 80014f4 <_vfiprintf_r+0x18>
 80014ec:	6983      	ldr	r3, [r0, #24]
 80014ee:	b90b      	cbnz	r3, 80014f4 <_vfiprintf_r+0x18>
 80014f0:	f7ff fee8 	bl	80012c4 <__sinit>
 80014f4:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <_vfiprintf_r+0x20c>)
 80014f6:	429c      	cmp	r4, r3
 80014f8:	d158      	bne.n	80015ac <_vfiprintf_r+0xd0>
 80014fa:	6874      	ldr	r4, [r6, #4]
 80014fc:	89a3      	ldrh	r3, [r4, #12]
 80014fe:	0718      	lsls	r0, r3, #28
 8001500:	d55e      	bpl.n	80015c0 <_vfiprintf_r+0xe4>
 8001502:	6923      	ldr	r3, [r4, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d05b      	beq.n	80015c0 <_vfiprintf_r+0xe4>
 8001508:	2300      	movs	r3, #0
 800150a:	9309      	str	r3, [sp, #36]	; 0x24
 800150c:	2320      	movs	r3, #32
 800150e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001512:	2330      	movs	r3, #48	; 0x30
 8001514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001518:	9503      	str	r5, [sp, #12]
 800151a:	f04f 0b01 	mov.w	fp, #1
 800151e:	46b8      	mov	r8, r7
 8001520:	4645      	mov	r5, r8
 8001522:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001526:	b10b      	cbz	r3, 800152c <_vfiprintf_r+0x50>
 8001528:	2b25      	cmp	r3, #37	; 0x25
 800152a:	d154      	bne.n	80015d6 <_vfiprintf_r+0xfa>
 800152c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001530:	d00b      	beq.n	800154a <_vfiprintf_r+0x6e>
 8001532:	4653      	mov	r3, sl
 8001534:	463a      	mov	r2, r7
 8001536:	4621      	mov	r1, r4
 8001538:	4630      	mov	r0, r6
 800153a:	f7ff ffbc 	bl	80014b6 <__sfputs_r>
 800153e:	3001      	adds	r0, #1
 8001540:	f000 80c2 	beq.w	80016c8 <_vfiprintf_r+0x1ec>
 8001544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001546:	4453      	add	r3, sl
 8001548:	9309      	str	r3, [sp, #36]	; 0x24
 800154a:	f898 3000 	ldrb.w	r3, [r8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80ba 	beq.w	80016c8 <_vfiprintf_r+0x1ec>
 8001554:	2300      	movs	r3, #0
 8001556:	f04f 32ff 	mov.w	r2, #4294967295
 800155a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800155e:	9304      	str	r3, [sp, #16]
 8001560:	9307      	str	r3, [sp, #28]
 8001562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001566:	931a      	str	r3, [sp, #104]	; 0x68
 8001568:	46a8      	mov	r8, r5
 800156a:	2205      	movs	r2, #5
 800156c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001570:	485e      	ldr	r0, [pc, #376]	; (80016ec <_vfiprintf_r+0x210>)
 8001572:	f7fe fe2d 	bl	80001d0 <memchr>
 8001576:	9b04      	ldr	r3, [sp, #16]
 8001578:	bb78      	cbnz	r0, 80015da <_vfiprintf_r+0xfe>
 800157a:	06d9      	lsls	r1, r3, #27
 800157c:	bf44      	itt	mi
 800157e:	2220      	movmi	r2, #32
 8001580:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001584:	071a      	lsls	r2, r3, #28
 8001586:	bf44      	itt	mi
 8001588:	222b      	movmi	r2, #43	; 0x2b
 800158a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800158e:	782a      	ldrb	r2, [r5, #0]
 8001590:	2a2a      	cmp	r2, #42	; 0x2a
 8001592:	d02a      	beq.n	80015ea <_vfiprintf_r+0x10e>
 8001594:	9a07      	ldr	r2, [sp, #28]
 8001596:	46a8      	mov	r8, r5
 8001598:	2000      	movs	r0, #0
 800159a:	250a      	movs	r5, #10
 800159c:	4641      	mov	r1, r8
 800159e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015a2:	3b30      	subs	r3, #48	; 0x30
 80015a4:	2b09      	cmp	r3, #9
 80015a6:	d969      	bls.n	800167c <_vfiprintf_r+0x1a0>
 80015a8:	b360      	cbz	r0, 8001604 <_vfiprintf_r+0x128>
 80015aa:	e024      	b.n	80015f6 <_vfiprintf_r+0x11a>
 80015ac:	4b50      	ldr	r3, [pc, #320]	; (80016f0 <_vfiprintf_r+0x214>)
 80015ae:	429c      	cmp	r4, r3
 80015b0:	d101      	bne.n	80015b6 <_vfiprintf_r+0xda>
 80015b2:	68b4      	ldr	r4, [r6, #8]
 80015b4:	e7a2      	b.n	80014fc <_vfiprintf_r+0x20>
 80015b6:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <_vfiprintf_r+0x218>)
 80015b8:	429c      	cmp	r4, r3
 80015ba:	bf08      	it	eq
 80015bc:	68f4      	ldreq	r4, [r6, #12]
 80015be:	e79d      	b.n	80014fc <_vfiprintf_r+0x20>
 80015c0:	4621      	mov	r1, r4
 80015c2:	4630      	mov	r0, r6
 80015c4:	f000 fae0 	bl	8001b88 <__swsetup_r>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d09d      	beq.n	8001508 <_vfiprintf_r+0x2c>
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	b01d      	add	sp, #116	; 0x74
 80015d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015d6:	46a8      	mov	r8, r5
 80015d8:	e7a2      	b.n	8001520 <_vfiprintf_r+0x44>
 80015da:	4a44      	ldr	r2, [pc, #272]	; (80016ec <_vfiprintf_r+0x210>)
 80015dc:	1a80      	subs	r0, r0, r2
 80015de:	fa0b f000 	lsl.w	r0, fp, r0
 80015e2:	4318      	orrs	r0, r3
 80015e4:	9004      	str	r0, [sp, #16]
 80015e6:	4645      	mov	r5, r8
 80015e8:	e7be      	b.n	8001568 <_vfiprintf_r+0x8c>
 80015ea:	9a03      	ldr	r2, [sp, #12]
 80015ec:	1d11      	adds	r1, r2, #4
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	9103      	str	r1, [sp, #12]
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	db01      	blt.n	80015fa <_vfiprintf_r+0x11e>
 80015f6:	9207      	str	r2, [sp, #28]
 80015f8:	e004      	b.n	8001604 <_vfiprintf_r+0x128>
 80015fa:	4252      	negs	r2, r2
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	9207      	str	r2, [sp, #28]
 8001602:	9304      	str	r3, [sp, #16]
 8001604:	f898 3000 	ldrb.w	r3, [r8]
 8001608:	2b2e      	cmp	r3, #46	; 0x2e
 800160a:	d10e      	bne.n	800162a <_vfiprintf_r+0x14e>
 800160c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001610:	2b2a      	cmp	r3, #42	; 0x2a
 8001612:	d138      	bne.n	8001686 <_vfiprintf_r+0x1aa>
 8001614:	9b03      	ldr	r3, [sp, #12]
 8001616:	1d1a      	adds	r2, r3, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	9203      	str	r2, [sp, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	bfb8      	it	lt
 8001620:	f04f 33ff 	movlt.w	r3, #4294967295
 8001624:	f108 0802 	add.w	r8, r8, #2
 8001628:	9305      	str	r3, [sp, #20]
 800162a:	4d33      	ldr	r5, [pc, #204]	; (80016f8 <_vfiprintf_r+0x21c>)
 800162c:	f898 1000 	ldrb.w	r1, [r8]
 8001630:	2203      	movs	r2, #3
 8001632:	4628      	mov	r0, r5
 8001634:	f7fe fdcc 	bl	80001d0 <memchr>
 8001638:	b140      	cbz	r0, 800164c <_vfiprintf_r+0x170>
 800163a:	2340      	movs	r3, #64	; 0x40
 800163c:	1b40      	subs	r0, r0, r5
 800163e:	fa03 f000 	lsl.w	r0, r3, r0
 8001642:	9b04      	ldr	r3, [sp, #16]
 8001644:	4303      	orrs	r3, r0
 8001646:	f108 0801 	add.w	r8, r8, #1
 800164a:	9304      	str	r3, [sp, #16]
 800164c:	f898 1000 	ldrb.w	r1, [r8]
 8001650:	482a      	ldr	r0, [pc, #168]	; (80016fc <_vfiprintf_r+0x220>)
 8001652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001656:	2206      	movs	r2, #6
 8001658:	f108 0701 	add.w	r7, r8, #1
 800165c:	f7fe fdb8 	bl	80001d0 <memchr>
 8001660:	2800      	cmp	r0, #0
 8001662:	d037      	beq.n	80016d4 <_vfiprintf_r+0x1f8>
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <_vfiprintf_r+0x224>)
 8001666:	bb1b      	cbnz	r3, 80016b0 <_vfiprintf_r+0x1d4>
 8001668:	9b03      	ldr	r3, [sp, #12]
 800166a:	3307      	adds	r3, #7
 800166c:	f023 0307 	bic.w	r3, r3, #7
 8001670:	3308      	adds	r3, #8
 8001672:	9303      	str	r3, [sp, #12]
 8001674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001676:	444b      	add	r3, r9
 8001678:	9309      	str	r3, [sp, #36]	; 0x24
 800167a:	e750      	b.n	800151e <_vfiprintf_r+0x42>
 800167c:	fb05 3202 	mla	r2, r5, r2, r3
 8001680:	2001      	movs	r0, #1
 8001682:	4688      	mov	r8, r1
 8001684:	e78a      	b.n	800159c <_vfiprintf_r+0xc0>
 8001686:	2300      	movs	r3, #0
 8001688:	f108 0801 	add.w	r8, r8, #1
 800168c:	9305      	str	r3, [sp, #20]
 800168e:	4619      	mov	r1, r3
 8001690:	250a      	movs	r5, #10
 8001692:	4640      	mov	r0, r8
 8001694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001698:	3a30      	subs	r2, #48	; 0x30
 800169a:	2a09      	cmp	r2, #9
 800169c:	d903      	bls.n	80016a6 <_vfiprintf_r+0x1ca>
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0c3      	beq.n	800162a <_vfiprintf_r+0x14e>
 80016a2:	9105      	str	r1, [sp, #20]
 80016a4:	e7c1      	b.n	800162a <_vfiprintf_r+0x14e>
 80016a6:	fb05 2101 	mla	r1, r5, r1, r2
 80016aa:	2301      	movs	r3, #1
 80016ac:	4680      	mov	r8, r0
 80016ae:	e7f0      	b.n	8001692 <_vfiprintf_r+0x1b6>
 80016b0:	ab03      	add	r3, sp, #12
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	4622      	mov	r2, r4
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <_vfiprintf_r+0x228>)
 80016b8:	a904      	add	r1, sp, #16
 80016ba:	4630      	mov	r0, r6
 80016bc:	f3af 8000 	nop.w
 80016c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80016c4:	4681      	mov	r9, r0
 80016c6:	d1d5      	bne.n	8001674 <_vfiprintf_r+0x198>
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	065b      	lsls	r3, r3, #25
 80016cc:	f53f af7e 	bmi.w	80015cc <_vfiprintf_r+0xf0>
 80016d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016d2:	e77d      	b.n	80015d0 <_vfiprintf_r+0xf4>
 80016d4:	ab03      	add	r3, sp, #12
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4622      	mov	r2, r4
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <_vfiprintf_r+0x228>)
 80016dc:	a904      	add	r1, sp, #16
 80016de:	4630      	mov	r0, r6
 80016e0:	f000 f888 	bl	80017f4 <_printf_i>
 80016e4:	e7ec      	b.n	80016c0 <_vfiprintf_r+0x1e4>
 80016e6:	bf00      	nop
 80016e8:	0800231c 	.word	0x0800231c
 80016ec:	0800235c 	.word	0x0800235c
 80016f0:	0800233c 	.word	0x0800233c
 80016f4:	080022fc 	.word	0x080022fc
 80016f8:	08002362 	.word	0x08002362
 80016fc:	08002366 	.word	0x08002366
 8001700:	00000000 	.word	0x00000000
 8001704:	080014b7 	.word	0x080014b7

08001708 <_printf_common>:
 8001708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800170c:	4691      	mov	r9, r2
 800170e:	461f      	mov	r7, r3
 8001710:	688a      	ldr	r2, [r1, #8]
 8001712:	690b      	ldr	r3, [r1, #16]
 8001714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001718:	4293      	cmp	r3, r2
 800171a:	bfb8      	it	lt
 800171c:	4613      	movlt	r3, r2
 800171e:	f8c9 3000 	str.w	r3, [r9]
 8001722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001726:	4606      	mov	r6, r0
 8001728:	460c      	mov	r4, r1
 800172a:	b112      	cbz	r2, 8001732 <_printf_common+0x2a>
 800172c:	3301      	adds	r3, #1
 800172e:	f8c9 3000 	str.w	r3, [r9]
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	0699      	lsls	r1, r3, #26
 8001736:	bf42      	ittt	mi
 8001738:	f8d9 3000 	ldrmi.w	r3, [r9]
 800173c:	3302      	addmi	r3, #2
 800173e:	f8c9 3000 	strmi.w	r3, [r9]
 8001742:	6825      	ldr	r5, [r4, #0]
 8001744:	f015 0506 	ands.w	r5, r5, #6
 8001748:	d107      	bne.n	800175a <_printf_common+0x52>
 800174a:	f104 0a19 	add.w	sl, r4, #25
 800174e:	68e3      	ldr	r3, [r4, #12]
 8001750:	f8d9 2000 	ldr.w	r2, [r9]
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	42ab      	cmp	r3, r5
 8001758:	dc28      	bgt.n	80017ac <_printf_common+0xa4>
 800175a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800175e:	6822      	ldr	r2, [r4, #0]
 8001760:	3300      	adds	r3, #0
 8001762:	bf18      	it	ne
 8001764:	2301      	movne	r3, #1
 8001766:	0692      	lsls	r2, r2, #26
 8001768:	d42d      	bmi.n	80017c6 <_printf_common+0xbe>
 800176a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800176e:	4639      	mov	r1, r7
 8001770:	4630      	mov	r0, r6
 8001772:	47c0      	blx	r8
 8001774:	3001      	adds	r0, #1
 8001776:	d020      	beq.n	80017ba <_printf_common+0xb2>
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	68e5      	ldr	r5, [r4, #12]
 800177c:	f8d9 2000 	ldr.w	r2, [r9]
 8001780:	f003 0306 	and.w	r3, r3, #6
 8001784:	2b04      	cmp	r3, #4
 8001786:	bf08      	it	eq
 8001788:	1aad      	subeq	r5, r5, r2
 800178a:	68a3      	ldr	r3, [r4, #8]
 800178c:	6922      	ldr	r2, [r4, #16]
 800178e:	bf0c      	ite	eq
 8001790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001794:	2500      	movne	r5, #0
 8001796:	4293      	cmp	r3, r2
 8001798:	bfc4      	itt	gt
 800179a:	1a9b      	subgt	r3, r3, r2
 800179c:	18ed      	addgt	r5, r5, r3
 800179e:	f04f 0900 	mov.w	r9, #0
 80017a2:	341a      	adds	r4, #26
 80017a4:	454d      	cmp	r5, r9
 80017a6:	d11a      	bne.n	80017de <_printf_common+0xd6>
 80017a8:	2000      	movs	r0, #0
 80017aa:	e008      	b.n	80017be <_printf_common+0xb6>
 80017ac:	2301      	movs	r3, #1
 80017ae:	4652      	mov	r2, sl
 80017b0:	4639      	mov	r1, r7
 80017b2:	4630      	mov	r0, r6
 80017b4:	47c0      	blx	r8
 80017b6:	3001      	adds	r0, #1
 80017b8:	d103      	bne.n	80017c2 <_printf_common+0xba>
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295
 80017be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c2:	3501      	adds	r5, #1
 80017c4:	e7c3      	b.n	800174e <_printf_common+0x46>
 80017c6:	18e1      	adds	r1, r4, r3
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	2030      	movs	r0, #48	; 0x30
 80017cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017d0:	4422      	add	r2, r4
 80017d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017da:	3302      	adds	r3, #2
 80017dc:	e7c5      	b.n	800176a <_printf_common+0x62>
 80017de:	2301      	movs	r3, #1
 80017e0:	4622      	mov	r2, r4
 80017e2:	4639      	mov	r1, r7
 80017e4:	4630      	mov	r0, r6
 80017e6:	47c0      	blx	r8
 80017e8:	3001      	adds	r0, #1
 80017ea:	d0e6      	beq.n	80017ba <_printf_common+0xb2>
 80017ec:	f109 0901 	add.w	r9, r9, #1
 80017f0:	e7d8      	b.n	80017a4 <_printf_common+0x9c>
	...

080017f4 <_printf_i>:
 80017f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80017fc:	460c      	mov	r4, r1
 80017fe:	7e09      	ldrb	r1, [r1, #24]
 8001800:	b085      	sub	sp, #20
 8001802:	296e      	cmp	r1, #110	; 0x6e
 8001804:	4617      	mov	r7, r2
 8001806:	4606      	mov	r6, r0
 8001808:	4698      	mov	r8, r3
 800180a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800180c:	f000 80b3 	beq.w	8001976 <_printf_i+0x182>
 8001810:	d822      	bhi.n	8001858 <_printf_i+0x64>
 8001812:	2963      	cmp	r1, #99	; 0x63
 8001814:	d036      	beq.n	8001884 <_printf_i+0x90>
 8001816:	d80a      	bhi.n	800182e <_printf_i+0x3a>
 8001818:	2900      	cmp	r1, #0
 800181a:	f000 80b9 	beq.w	8001990 <_printf_i+0x19c>
 800181e:	2958      	cmp	r1, #88	; 0x58
 8001820:	f000 8083 	beq.w	800192a <_printf_i+0x136>
 8001824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001828:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800182c:	e032      	b.n	8001894 <_printf_i+0xa0>
 800182e:	2964      	cmp	r1, #100	; 0x64
 8001830:	d001      	beq.n	8001836 <_printf_i+0x42>
 8001832:	2969      	cmp	r1, #105	; 0x69
 8001834:	d1f6      	bne.n	8001824 <_printf_i+0x30>
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	0605      	lsls	r5, r0, #24
 800183c:	f103 0104 	add.w	r1, r3, #4
 8001840:	d52a      	bpl.n	8001898 <_printf_i+0xa4>
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6011      	str	r1, [r2, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	da03      	bge.n	8001852 <_printf_i+0x5e>
 800184a:	222d      	movs	r2, #45	; 0x2d
 800184c:	425b      	negs	r3, r3
 800184e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001852:	486f      	ldr	r0, [pc, #444]	; (8001a10 <_printf_i+0x21c>)
 8001854:	220a      	movs	r2, #10
 8001856:	e039      	b.n	80018cc <_printf_i+0xd8>
 8001858:	2973      	cmp	r1, #115	; 0x73
 800185a:	f000 809d 	beq.w	8001998 <_printf_i+0x1a4>
 800185e:	d808      	bhi.n	8001872 <_printf_i+0x7e>
 8001860:	296f      	cmp	r1, #111	; 0x6f
 8001862:	d020      	beq.n	80018a6 <_printf_i+0xb2>
 8001864:	2970      	cmp	r1, #112	; 0x70
 8001866:	d1dd      	bne.n	8001824 <_printf_i+0x30>
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	6023      	str	r3, [r4, #0]
 8001870:	e003      	b.n	800187a <_printf_i+0x86>
 8001872:	2975      	cmp	r1, #117	; 0x75
 8001874:	d017      	beq.n	80018a6 <_printf_i+0xb2>
 8001876:	2978      	cmp	r1, #120	; 0x78
 8001878:	d1d4      	bne.n	8001824 <_printf_i+0x30>
 800187a:	2378      	movs	r3, #120	; 0x78
 800187c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001880:	4864      	ldr	r0, [pc, #400]	; (8001a14 <_printf_i+0x220>)
 8001882:	e055      	b.n	8001930 <_printf_i+0x13c>
 8001884:	6813      	ldr	r3, [r2, #0]
 8001886:	1d19      	adds	r1, r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6011      	str	r1, [r2, #0]
 800188c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001894:	2301      	movs	r3, #1
 8001896:	e08c      	b.n	80019b2 <_printf_i+0x1be>
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6011      	str	r1, [r2, #0]
 800189c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018a0:	bf18      	it	ne
 80018a2:	b21b      	sxthne	r3, r3
 80018a4:	e7cf      	b.n	8001846 <_printf_i+0x52>
 80018a6:	6813      	ldr	r3, [r2, #0]
 80018a8:	6825      	ldr	r5, [r4, #0]
 80018aa:	1d18      	adds	r0, r3, #4
 80018ac:	6010      	str	r0, [r2, #0]
 80018ae:	0628      	lsls	r0, r5, #24
 80018b0:	d501      	bpl.n	80018b6 <_printf_i+0xc2>
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e002      	b.n	80018bc <_printf_i+0xc8>
 80018b6:	0668      	lsls	r0, r5, #25
 80018b8:	d5fb      	bpl.n	80018b2 <_printf_i+0xbe>
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	4854      	ldr	r0, [pc, #336]	; (8001a10 <_printf_i+0x21c>)
 80018be:	296f      	cmp	r1, #111	; 0x6f
 80018c0:	bf14      	ite	ne
 80018c2:	220a      	movne	r2, #10
 80018c4:	2208      	moveq	r2, #8
 80018c6:	2100      	movs	r1, #0
 80018c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018cc:	6865      	ldr	r5, [r4, #4]
 80018ce:	60a5      	str	r5, [r4, #8]
 80018d0:	2d00      	cmp	r5, #0
 80018d2:	f2c0 8095 	blt.w	8001a00 <_printf_i+0x20c>
 80018d6:	6821      	ldr	r1, [r4, #0]
 80018d8:	f021 0104 	bic.w	r1, r1, #4
 80018dc:	6021      	str	r1, [r4, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d13d      	bne.n	800195e <_printf_i+0x16a>
 80018e2:	2d00      	cmp	r5, #0
 80018e4:	f040 808e 	bne.w	8001a04 <_printf_i+0x210>
 80018e8:	4665      	mov	r5, ip
 80018ea:	2a08      	cmp	r2, #8
 80018ec:	d10b      	bne.n	8001906 <_printf_i+0x112>
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	07db      	lsls	r3, r3, #31
 80018f2:	d508      	bpl.n	8001906 <_printf_i+0x112>
 80018f4:	6923      	ldr	r3, [r4, #16]
 80018f6:	6862      	ldr	r2, [r4, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	bfde      	ittt	le
 80018fc:	2330      	movle	r3, #48	; 0x30
 80018fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001902:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001906:	ebac 0305 	sub.w	r3, ip, r5
 800190a:	6123      	str	r3, [r4, #16]
 800190c:	f8cd 8000 	str.w	r8, [sp]
 8001910:	463b      	mov	r3, r7
 8001912:	aa03      	add	r2, sp, #12
 8001914:	4621      	mov	r1, r4
 8001916:	4630      	mov	r0, r6
 8001918:	f7ff fef6 	bl	8001708 <_printf_common>
 800191c:	3001      	adds	r0, #1
 800191e:	d14d      	bne.n	80019bc <_printf_i+0x1c8>
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	b005      	add	sp, #20
 8001926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800192a:	4839      	ldr	r0, [pc, #228]	; (8001a10 <_printf_i+0x21c>)
 800192c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001930:	6813      	ldr	r3, [r2, #0]
 8001932:	6821      	ldr	r1, [r4, #0]
 8001934:	1d1d      	adds	r5, r3, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6015      	str	r5, [r2, #0]
 800193a:	060a      	lsls	r2, r1, #24
 800193c:	d50b      	bpl.n	8001956 <_printf_i+0x162>
 800193e:	07ca      	lsls	r2, r1, #31
 8001940:	bf44      	itt	mi
 8001942:	f041 0120 	orrmi.w	r1, r1, #32
 8001946:	6021      	strmi	r1, [r4, #0]
 8001948:	b91b      	cbnz	r3, 8001952 <_printf_i+0x15e>
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	f022 0220 	bic.w	r2, r2, #32
 8001950:	6022      	str	r2, [r4, #0]
 8001952:	2210      	movs	r2, #16
 8001954:	e7b7      	b.n	80018c6 <_printf_i+0xd2>
 8001956:	064d      	lsls	r5, r1, #25
 8001958:	bf48      	it	mi
 800195a:	b29b      	uxthmi	r3, r3
 800195c:	e7ef      	b.n	800193e <_printf_i+0x14a>
 800195e:	4665      	mov	r5, ip
 8001960:	fbb3 f1f2 	udiv	r1, r3, r2
 8001964:	fb02 3311 	mls	r3, r2, r1, r3
 8001968:	5cc3      	ldrb	r3, [r0, r3]
 800196a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800196e:	460b      	mov	r3, r1
 8001970:	2900      	cmp	r1, #0
 8001972:	d1f5      	bne.n	8001960 <_printf_i+0x16c>
 8001974:	e7b9      	b.n	80018ea <_printf_i+0xf6>
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	6825      	ldr	r5, [r4, #0]
 800197a:	6961      	ldr	r1, [r4, #20]
 800197c:	1d18      	adds	r0, r3, #4
 800197e:	6010      	str	r0, [r2, #0]
 8001980:	0628      	lsls	r0, r5, #24
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	d501      	bpl.n	800198a <_printf_i+0x196>
 8001986:	6019      	str	r1, [r3, #0]
 8001988:	e002      	b.n	8001990 <_printf_i+0x19c>
 800198a:	066a      	lsls	r2, r5, #25
 800198c:	d5fb      	bpl.n	8001986 <_printf_i+0x192>
 800198e:	8019      	strh	r1, [r3, #0]
 8001990:	2300      	movs	r3, #0
 8001992:	6123      	str	r3, [r4, #16]
 8001994:	4665      	mov	r5, ip
 8001996:	e7b9      	b.n	800190c <_printf_i+0x118>
 8001998:	6813      	ldr	r3, [r2, #0]
 800199a:	1d19      	adds	r1, r3, #4
 800199c:	6011      	str	r1, [r2, #0]
 800199e:	681d      	ldr	r5, [r3, #0]
 80019a0:	6862      	ldr	r2, [r4, #4]
 80019a2:	2100      	movs	r1, #0
 80019a4:	4628      	mov	r0, r5
 80019a6:	f7fe fc13 	bl	80001d0 <memchr>
 80019aa:	b108      	cbz	r0, 80019b0 <_printf_i+0x1bc>
 80019ac:	1b40      	subs	r0, r0, r5
 80019ae:	6060      	str	r0, [r4, #4]
 80019b0:	6863      	ldr	r3, [r4, #4]
 80019b2:	6123      	str	r3, [r4, #16]
 80019b4:	2300      	movs	r3, #0
 80019b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019ba:	e7a7      	b.n	800190c <_printf_i+0x118>
 80019bc:	6923      	ldr	r3, [r4, #16]
 80019be:	462a      	mov	r2, r5
 80019c0:	4639      	mov	r1, r7
 80019c2:	4630      	mov	r0, r6
 80019c4:	47c0      	blx	r8
 80019c6:	3001      	adds	r0, #1
 80019c8:	d0aa      	beq.n	8001920 <_printf_i+0x12c>
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	079b      	lsls	r3, r3, #30
 80019ce:	d413      	bmi.n	80019f8 <_printf_i+0x204>
 80019d0:	68e0      	ldr	r0, [r4, #12]
 80019d2:	9b03      	ldr	r3, [sp, #12]
 80019d4:	4298      	cmp	r0, r3
 80019d6:	bfb8      	it	lt
 80019d8:	4618      	movlt	r0, r3
 80019da:	e7a3      	b.n	8001924 <_printf_i+0x130>
 80019dc:	2301      	movs	r3, #1
 80019de:	464a      	mov	r2, r9
 80019e0:	4639      	mov	r1, r7
 80019e2:	4630      	mov	r0, r6
 80019e4:	47c0      	blx	r8
 80019e6:	3001      	adds	r0, #1
 80019e8:	d09a      	beq.n	8001920 <_printf_i+0x12c>
 80019ea:	3501      	adds	r5, #1
 80019ec:	68e3      	ldr	r3, [r4, #12]
 80019ee:	9a03      	ldr	r2, [sp, #12]
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	42ab      	cmp	r3, r5
 80019f4:	dcf2      	bgt.n	80019dc <_printf_i+0x1e8>
 80019f6:	e7eb      	b.n	80019d0 <_printf_i+0x1dc>
 80019f8:	2500      	movs	r5, #0
 80019fa:	f104 0919 	add.w	r9, r4, #25
 80019fe:	e7f5      	b.n	80019ec <_printf_i+0x1f8>
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ac      	bne.n	800195e <_printf_i+0x16a>
 8001a04:	7803      	ldrb	r3, [r0, #0]
 8001a06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a0e:	e76c      	b.n	80018ea <_printf_i+0xf6>
 8001a10:	0800236d 	.word	0x0800236d
 8001a14:	0800237e 	.word	0x0800237e

08001a18 <_sbrk_r>:
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	4c06      	ldr	r4, [pc, #24]	; (8001a34 <_sbrk_r+0x1c>)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4605      	mov	r5, r0
 8001a20:	4608      	mov	r0, r1
 8001a22:	6023      	str	r3, [r4, #0]
 8001a24:	f000 fbde 	bl	80021e4 <_sbrk>
 8001a28:	1c43      	adds	r3, r0, #1
 8001a2a:	d102      	bne.n	8001a32 <_sbrk_r+0x1a>
 8001a2c:	6823      	ldr	r3, [r4, #0]
 8001a2e:	b103      	cbz	r3, 8001a32 <_sbrk_r+0x1a>
 8001a30:	602b      	str	r3, [r5, #0]
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
 8001a34:	20000350 	.word	0x20000350

08001a38 <__sread>:
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a40:	f000 fa96 	bl	8001f70 <_read_r>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	bfab      	itete	ge
 8001a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a4c:	181b      	addge	r3, r3, r0
 8001a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a52:	bfac      	ite	ge
 8001a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a56:	81a3      	strhlt	r3, [r4, #12]
 8001a58:	bd10      	pop	{r4, pc}

08001a5a <__swrite>:
 8001a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a5e:	461f      	mov	r7, r3
 8001a60:	898b      	ldrh	r3, [r1, #12]
 8001a62:	05db      	lsls	r3, r3, #23
 8001a64:	4605      	mov	r5, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	4616      	mov	r6, r2
 8001a6a:	d505      	bpl.n	8001a78 <__swrite+0x1e>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a74:	f000 f9b6 	bl	8001de4 <_lseek_r>
 8001a78:	89a3      	ldrh	r3, [r4, #12]
 8001a7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	4632      	mov	r2, r6
 8001a86:	463b      	mov	r3, r7
 8001a88:	4628      	mov	r0, r5
 8001a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a8e:	f000 b869 	b.w	8001b64 <_write_r>

08001a92 <__sseek>:
 8001a92:	b510      	push	{r4, lr}
 8001a94:	460c      	mov	r4, r1
 8001a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9a:	f000 f9a3 	bl	8001de4 <_lseek_r>
 8001a9e:	1c43      	adds	r3, r0, #1
 8001aa0:	89a3      	ldrh	r3, [r4, #12]
 8001aa2:	bf15      	itete	ne
 8001aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aae:	81a3      	strheq	r3, [r4, #12]
 8001ab0:	bf18      	it	ne
 8001ab2:	81a3      	strhne	r3, [r4, #12]
 8001ab4:	bd10      	pop	{r4, pc}

08001ab6 <__sclose>:
 8001ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aba:	f000 b8d3 	b.w	8001c64 <_close_r>
	...

08001ac0 <__swbuf_r>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	460e      	mov	r6, r1
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	b118      	cbz	r0, 8001ad2 <__swbuf_r+0x12>
 8001aca:	6983      	ldr	r3, [r0, #24]
 8001acc:	b90b      	cbnz	r3, 8001ad2 <__swbuf_r+0x12>
 8001ace:	f7ff fbf9 	bl	80012c4 <__sinit>
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <__swbuf_r+0x98>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	d12a      	bne.n	8001b2e <__swbuf_r+0x6e>
 8001ad8:	686c      	ldr	r4, [r5, #4]
 8001ada:	69a3      	ldr	r3, [r4, #24]
 8001adc:	60a3      	str	r3, [r4, #8]
 8001ade:	89a3      	ldrh	r3, [r4, #12]
 8001ae0:	071a      	lsls	r2, r3, #28
 8001ae2:	d52e      	bpl.n	8001b42 <__swbuf_r+0x82>
 8001ae4:	6923      	ldr	r3, [r4, #16]
 8001ae6:	b363      	cbz	r3, 8001b42 <__swbuf_r+0x82>
 8001ae8:	6923      	ldr	r3, [r4, #16]
 8001aea:	6820      	ldr	r0, [r4, #0]
 8001aec:	1ac0      	subs	r0, r0, r3
 8001aee:	6963      	ldr	r3, [r4, #20]
 8001af0:	b2f6      	uxtb	r6, r6
 8001af2:	4283      	cmp	r3, r0
 8001af4:	4637      	mov	r7, r6
 8001af6:	dc04      	bgt.n	8001b02 <__swbuf_r+0x42>
 8001af8:	4621      	mov	r1, r4
 8001afa:	4628      	mov	r0, r5
 8001afc:	f000 f948 	bl	8001d90 <_fflush_r>
 8001b00:	bb28      	cbnz	r0, 8001b4e <__swbuf_r+0x8e>
 8001b02:	68a3      	ldr	r3, [r4, #8]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60a3      	str	r3, [r4, #8]
 8001b08:	6823      	ldr	r3, [r4, #0]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	6022      	str	r2, [r4, #0]
 8001b0e:	701e      	strb	r6, [r3, #0]
 8001b10:	6963      	ldr	r3, [r4, #20]
 8001b12:	3001      	adds	r0, #1
 8001b14:	4283      	cmp	r3, r0
 8001b16:	d004      	beq.n	8001b22 <__swbuf_r+0x62>
 8001b18:	89a3      	ldrh	r3, [r4, #12]
 8001b1a:	07db      	lsls	r3, r3, #31
 8001b1c:	d519      	bpl.n	8001b52 <__swbuf_r+0x92>
 8001b1e:	2e0a      	cmp	r6, #10
 8001b20:	d117      	bne.n	8001b52 <__swbuf_r+0x92>
 8001b22:	4621      	mov	r1, r4
 8001b24:	4628      	mov	r0, r5
 8001b26:	f000 f933 	bl	8001d90 <_fflush_r>
 8001b2a:	b190      	cbz	r0, 8001b52 <__swbuf_r+0x92>
 8001b2c:	e00f      	b.n	8001b4e <__swbuf_r+0x8e>
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <__swbuf_r+0x9c>)
 8001b30:	429c      	cmp	r4, r3
 8001b32:	d101      	bne.n	8001b38 <__swbuf_r+0x78>
 8001b34:	68ac      	ldr	r4, [r5, #8]
 8001b36:	e7d0      	b.n	8001ada <__swbuf_r+0x1a>
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <__swbuf_r+0xa0>)
 8001b3a:	429c      	cmp	r4, r3
 8001b3c:	bf08      	it	eq
 8001b3e:	68ec      	ldreq	r4, [r5, #12]
 8001b40:	e7cb      	b.n	8001ada <__swbuf_r+0x1a>
 8001b42:	4621      	mov	r1, r4
 8001b44:	4628      	mov	r0, r5
 8001b46:	f000 f81f 	bl	8001b88 <__swsetup_r>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d0cc      	beq.n	8001ae8 <__swbuf_r+0x28>
 8001b4e:	f04f 37ff 	mov.w	r7, #4294967295
 8001b52:	4638      	mov	r0, r7
 8001b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0800231c 	.word	0x0800231c
 8001b5c:	0800233c 	.word	0x0800233c
 8001b60:	080022fc 	.word	0x080022fc

08001b64 <_write_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4c07      	ldr	r4, [pc, #28]	; (8001b84 <_write_r+0x20>)
 8001b68:	4605      	mov	r5, r0
 8001b6a:	4608      	mov	r0, r1
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6022      	str	r2, [r4, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f000 fae1 	bl	800213a <_write>
 8001b78:	1c43      	adds	r3, r0, #1
 8001b7a:	d102      	bne.n	8001b82 <_write_r+0x1e>
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	b103      	cbz	r3, 8001b82 <_write_r+0x1e>
 8001b80:	602b      	str	r3, [r5, #0]
 8001b82:	bd38      	pop	{r3, r4, r5, pc}
 8001b84:	20000350 	.word	0x20000350

08001b88 <__swsetup_r>:
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <__swsetup_r+0xcc>)
 8001b8a:	b570      	push	{r4, r5, r6, lr}
 8001b8c:	681d      	ldr	r5, [r3, #0]
 8001b8e:	4606      	mov	r6, r0
 8001b90:	460c      	mov	r4, r1
 8001b92:	b125      	cbz	r5, 8001b9e <__swsetup_r+0x16>
 8001b94:	69ab      	ldr	r3, [r5, #24]
 8001b96:	b913      	cbnz	r3, 8001b9e <__swsetup_r+0x16>
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7ff fb93 	bl	80012c4 <__sinit>
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <__swsetup_r+0xd0>)
 8001ba0:	429c      	cmp	r4, r3
 8001ba2:	d10f      	bne.n	8001bc4 <__swsetup_r+0x3c>
 8001ba4:	686c      	ldr	r4, [r5, #4]
 8001ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	0715      	lsls	r5, r2, #28
 8001bae:	d42c      	bmi.n	8001c0a <__swsetup_r+0x82>
 8001bb0:	06d0      	lsls	r0, r2, #27
 8001bb2:	d411      	bmi.n	8001bd8 <__swsetup_r+0x50>
 8001bb4:	2209      	movs	r2, #9
 8001bb6:	6032      	str	r2, [r6, #0]
 8001bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbc:	81a3      	strh	r3, [r4, #12]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	e03e      	b.n	8001c42 <__swsetup_r+0xba>
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <__swsetup_r+0xd4>)
 8001bc6:	429c      	cmp	r4, r3
 8001bc8:	d101      	bne.n	8001bce <__swsetup_r+0x46>
 8001bca:	68ac      	ldr	r4, [r5, #8]
 8001bcc:	e7eb      	b.n	8001ba6 <__swsetup_r+0x1e>
 8001bce:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <__swsetup_r+0xd8>)
 8001bd0:	429c      	cmp	r4, r3
 8001bd2:	bf08      	it	eq
 8001bd4:	68ec      	ldreq	r4, [r5, #12]
 8001bd6:	e7e6      	b.n	8001ba6 <__swsetup_r+0x1e>
 8001bd8:	0751      	lsls	r1, r2, #29
 8001bda:	d512      	bpl.n	8001c02 <__swsetup_r+0x7a>
 8001bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bde:	b141      	cbz	r1, 8001bf2 <__swsetup_r+0x6a>
 8001be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001be4:	4299      	cmp	r1, r3
 8001be6:	d002      	beq.n	8001bee <__swsetup_r+0x66>
 8001be8:	4630      	mov	r0, r6
 8001bea:	f000 f973 	bl	8001ed4 <_free_r>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bf8:	81a3      	strh	r3, [r4, #12]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	6063      	str	r3, [r4, #4]
 8001bfe:	6923      	ldr	r3, [r4, #16]
 8001c00:	6023      	str	r3, [r4, #0]
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	f043 0308 	orr.w	r3, r3, #8
 8001c08:	81a3      	strh	r3, [r4, #12]
 8001c0a:	6923      	ldr	r3, [r4, #16]
 8001c0c:	b94b      	cbnz	r3, 8001c22 <__swsetup_r+0x9a>
 8001c0e:	89a3      	ldrh	r3, [r4, #12]
 8001c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c18:	d003      	beq.n	8001c22 <__swsetup_r+0x9a>
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	4630      	mov	r0, r6
 8001c1e:	f000 f917 	bl	8001e50 <__smakebuf_r>
 8001c22:	89a2      	ldrh	r2, [r4, #12]
 8001c24:	f012 0301 	ands.w	r3, r2, #1
 8001c28:	d00c      	beq.n	8001c44 <__swsetup_r+0xbc>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60a3      	str	r3, [r4, #8]
 8001c2e:	6963      	ldr	r3, [r4, #20]
 8001c30:	425b      	negs	r3, r3
 8001c32:	61a3      	str	r3, [r4, #24]
 8001c34:	6923      	ldr	r3, [r4, #16]
 8001c36:	b953      	cbnz	r3, 8001c4e <__swsetup_r+0xc6>
 8001c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001c40:	d1ba      	bne.n	8001bb8 <__swsetup_r+0x30>
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
 8001c44:	0792      	lsls	r2, r2, #30
 8001c46:	bf58      	it	pl
 8001c48:	6963      	ldrpl	r3, [r4, #20]
 8001c4a:	60a3      	str	r3, [r4, #8]
 8001c4c:	e7f2      	b.n	8001c34 <__swsetup_r+0xac>
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e7f7      	b.n	8001c42 <__swsetup_r+0xba>
 8001c52:	bf00      	nop
 8001c54:	20000000 	.word	0x20000000
 8001c58:	0800231c 	.word	0x0800231c
 8001c5c:	0800233c 	.word	0x0800233c
 8001c60:	080022fc 	.word	0x080022fc

08001c64 <_close_r>:
 8001c64:	b538      	push	{r3, r4, r5, lr}
 8001c66:	4c06      	ldr	r4, [pc, #24]	; (8001c80 <_close_r+0x1c>)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4605      	mov	r5, r0
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	6023      	str	r3, [r4, #0]
 8001c70:	f000 fa92 	bl	8002198 <_close>
 8001c74:	1c43      	adds	r3, r0, #1
 8001c76:	d102      	bne.n	8001c7e <_close_r+0x1a>
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	b103      	cbz	r3, 8001c7e <_close_r+0x1a>
 8001c7c:	602b      	str	r3, [r5, #0]
 8001c7e:	bd38      	pop	{r3, r4, r5, pc}
 8001c80:	20000350 	.word	0x20000350

08001c84 <__sflush_r>:
 8001c84:	898a      	ldrh	r2, [r1, #12]
 8001c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8a:	4605      	mov	r5, r0
 8001c8c:	0710      	lsls	r0, r2, #28
 8001c8e:	460c      	mov	r4, r1
 8001c90:	d458      	bmi.n	8001d44 <__sflush_r+0xc0>
 8001c92:	684b      	ldr	r3, [r1, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	dc05      	bgt.n	8001ca4 <__sflush_r+0x20>
 8001c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dc02      	bgt.n	8001ca4 <__sflush_r+0x20>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ca6:	2e00      	cmp	r6, #0
 8001ca8:	d0f9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001caa:	2300      	movs	r3, #0
 8001cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cb0:	682f      	ldr	r7, [r5, #0]
 8001cb2:	6a21      	ldr	r1, [r4, #32]
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	d032      	beq.n	8001d1e <__sflush_r+0x9a>
 8001cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cba:	89a3      	ldrh	r3, [r4, #12]
 8001cbc:	075a      	lsls	r2, r3, #29
 8001cbe:	d505      	bpl.n	8001ccc <__sflush_r+0x48>
 8001cc0:	6863      	ldr	r3, [r4, #4]
 8001cc2:	1ac0      	subs	r0, r0, r3
 8001cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cc6:	b10b      	cbz	r3, 8001ccc <__sflush_r+0x48>
 8001cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cca:	1ac0      	subs	r0, r0, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cd2:	6a21      	ldr	r1, [r4, #32]
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	47b0      	blx	r6
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	89a3      	ldrh	r3, [r4, #12]
 8001cdc:	d106      	bne.n	8001cec <__sflush_r+0x68>
 8001cde:	6829      	ldr	r1, [r5, #0]
 8001ce0:	291d      	cmp	r1, #29
 8001ce2:	d848      	bhi.n	8001d76 <__sflush_r+0xf2>
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <__sflush_r+0x108>)
 8001ce6:	40ca      	lsrs	r2, r1
 8001ce8:	07d6      	lsls	r6, r2, #31
 8001cea:	d544      	bpl.n	8001d76 <__sflush_r+0xf2>
 8001cec:	2200      	movs	r2, #0
 8001cee:	6062      	str	r2, [r4, #4]
 8001cf0:	04d9      	lsls	r1, r3, #19
 8001cf2:	6922      	ldr	r2, [r4, #16]
 8001cf4:	6022      	str	r2, [r4, #0]
 8001cf6:	d504      	bpl.n	8001d02 <__sflush_r+0x7e>
 8001cf8:	1c42      	adds	r2, r0, #1
 8001cfa:	d101      	bne.n	8001d00 <__sflush_r+0x7c>
 8001cfc:	682b      	ldr	r3, [r5, #0]
 8001cfe:	b903      	cbnz	r3, 8001d02 <__sflush_r+0x7e>
 8001d00:	6560      	str	r0, [r4, #84]	; 0x54
 8001d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d04:	602f      	str	r7, [r5, #0]
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d0c9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d0e:	4299      	cmp	r1, r3
 8001d10:	d002      	beq.n	8001d18 <__sflush_r+0x94>
 8001d12:	4628      	mov	r0, r5
 8001d14:	f000 f8de 	bl	8001ed4 <_free_r>
 8001d18:	2000      	movs	r0, #0
 8001d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8001d1c:	e7c0      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	4628      	mov	r0, r5
 8001d22:	47b0      	blx	r6
 8001d24:	1c41      	adds	r1, r0, #1
 8001d26:	d1c8      	bne.n	8001cba <__sflush_r+0x36>
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0c5      	beq.n	8001cba <__sflush_r+0x36>
 8001d2e:	2b1d      	cmp	r3, #29
 8001d30:	d001      	beq.n	8001d36 <__sflush_r+0xb2>
 8001d32:	2b16      	cmp	r3, #22
 8001d34:	d101      	bne.n	8001d3a <__sflush_r+0xb6>
 8001d36:	602f      	str	r7, [r5, #0]
 8001d38:	e7b1      	b.n	8001c9e <__sflush_r+0x1a>
 8001d3a:	89a3      	ldrh	r3, [r4, #12]
 8001d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d40:	81a3      	strh	r3, [r4, #12]
 8001d42:	e7ad      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d44:	690f      	ldr	r7, [r1, #16]
 8001d46:	2f00      	cmp	r7, #0
 8001d48:	d0a9      	beq.n	8001c9e <__sflush_r+0x1a>
 8001d4a:	0793      	lsls	r3, r2, #30
 8001d4c:	680e      	ldr	r6, [r1, #0]
 8001d4e:	bf08      	it	eq
 8001d50:	694b      	ldreq	r3, [r1, #20]
 8001d52:	600f      	str	r7, [r1, #0]
 8001d54:	bf18      	it	ne
 8001d56:	2300      	movne	r3, #0
 8001d58:	eba6 0807 	sub.w	r8, r6, r7
 8001d5c:	608b      	str	r3, [r1, #8]
 8001d5e:	f1b8 0f00 	cmp.w	r8, #0
 8001d62:	dd9c      	ble.n	8001c9e <__sflush_r+0x1a>
 8001d64:	4643      	mov	r3, r8
 8001d66:	463a      	mov	r2, r7
 8001d68:	6a21      	ldr	r1, [r4, #32]
 8001d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	47b0      	blx	r6
 8001d70:	2800      	cmp	r0, #0
 8001d72:	dc06      	bgt.n	8001d82 <__sflush_r+0xfe>
 8001d74:	89a3      	ldrh	r3, [r4, #12]
 8001d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d7a:	81a3      	strh	r3, [r4, #12]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	e78e      	b.n	8001ca0 <__sflush_r+0x1c>
 8001d82:	4407      	add	r7, r0
 8001d84:	eba8 0800 	sub.w	r8, r8, r0
 8001d88:	e7e9      	b.n	8001d5e <__sflush_r+0xda>
 8001d8a:	bf00      	nop
 8001d8c:	20400001 	.word	0x20400001

08001d90 <_fflush_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	690b      	ldr	r3, [r1, #16]
 8001d94:	4605      	mov	r5, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	b1db      	cbz	r3, 8001dd2 <_fflush_r+0x42>
 8001d9a:	b118      	cbz	r0, 8001da4 <_fflush_r+0x14>
 8001d9c:	6983      	ldr	r3, [r0, #24]
 8001d9e:	b90b      	cbnz	r3, 8001da4 <_fflush_r+0x14>
 8001da0:	f7ff fa90 	bl	80012c4 <__sinit>
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <_fflush_r+0x48>)
 8001da6:	429c      	cmp	r4, r3
 8001da8:	d109      	bne.n	8001dbe <_fflush_r+0x2e>
 8001daa:	686c      	ldr	r4, [r5, #4]
 8001dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001db0:	b17b      	cbz	r3, 8001dd2 <_fflush_r+0x42>
 8001db2:	4621      	mov	r1, r4
 8001db4:	4628      	mov	r0, r5
 8001db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dba:	f7ff bf63 	b.w	8001c84 <__sflush_r>
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_fflush_r+0x4c>)
 8001dc0:	429c      	cmp	r4, r3
 8001dc2:	d101      	bne.n	8001dc8 <_fflush_r+0x38>
 8001dc4:	68ac      	ldr	r4, [r5, #8]
 8001dc6:	e7f1      	b.n	8001dac <_fflush_r+0x1c>
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <_fflush_r+0x50>)
 8001dca:	429c      	cmp	r4, r3
 8001dcc:	bf08      	it	eq
 8001dce:	68ec      	ldreq	r4, [r5, #12]
 8001dd0:	e7ec      	b.n	8001dac <_fflush_r+0x1c>
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	bd38      	pop	{r3, r4, r5, pc}
 8001dd6:	bf00      	nop
 8001dd8:	0800231c 	.word	0x0800231c
 8001ddc:	0800233c 	.word	0x0800233c
 8001de0:	080022fc 	.word	0x080022fc

08001de4 <_lseek_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4c07      	ldr	r4, [pc, #28]	; (8001e04 <_lseek_r+0x20>)
 8001de8:	4605      	mov	r5, r0
 8001dea:	4608      	mov	r0, r1
 8001dec:	4611      	mov	r1, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	6022      	str	r2, [r4, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f000 f98f 	bl	8002116 <_lseek>
 8001df8:	1c43      	adds	r3, r0, #1
 8001dfa:	d102      	bne.n	8001e02 <_lseek_r+0x1e>
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	b103      	cbz	r3, 8001e02 <_lseek_r+0x1e>
 8001e00:	602b      	str	r3, [r5, #0]
 8001e02:	bd38      	pop	{r3, r4, r5, pc}
 8001e04:	20000350 	.word	0x20000350

08001e08 <__swhatbuf_r>:
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	460e      	mov	r6, r1
 8001e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e10:	2900      	cmp	r1, #0
 8001e12:	b096      	sub	sp, #88	; 0x58
 8001e14:	4614      	mov	r4, r2
 8001e16:	461d      	mov	r5, r3
 8001e18:	da07      	bge.n	8001e2a <__swhatbuf_r+0x22>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	602b      	str	r3, [r5, #0]
 8001e1e:	89b3      	ldrh	r3, [r6, #12]
 8001e20:	061a      	lsls	r2, r3, #24
 8001e22:	d410      	bmi.n	8001e46 <__swhatbuf_r+0x3e>
 8001e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e28:	e00e      	b.n	8001e48 <__swhatbuf_r+0x40>
 8001e2a:	466a      	mov	r2, sp
 8001e2c:	f000 f8b2 	bl	8001f94 <_fstat_r>
 8001e30:	2800      	cmp	r0, #0
 8001e32:	dbf2      	blt.n	8001e1a <__swhatbuf_r+0x12>
 8001e34:	9a01      	ldr	r2, [sp, #4]
 8001e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e3e:	425a      	negs	r2, r3
 8001e40:	415a      	adcs	r2, r3
 8001e42:	602a      	str	r2, [r5, #0]
 8001e44:	e7ee      	b.n	8001e24 <__swhatbuf_r+0x1c>
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	2000      	movs	r0, #0
 8001e4a:	6023      	str	r3, [r4, #0]
 8001e4c:	b016      	add	sp, #88	; 0x58
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}

08001e50 <__smakebuf_r>:
 8001e50:	898b      	ldrh	r3, [r1, #12]
 8001e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e54:	079d      	lsls	r5, r3, #30
 8001e56:	4606      	mov	r6, r0
 8001e58:	460c      	mov	r4, r1
 8001e5a:	d507      	bpl.n	8001e6c <__smakebuf_r+0x1c>
 8001e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	6123      	str	r3, [r4, #16]
 8001e64:	2301      	movs	r3, #1
 8001e66:	6163      	str	r3, [r4, #20]
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	ab01      	add	r3, sp, #4
 8001e6e:	466a      	mov	r2, sp
 8001e70:	f7ff ffca 	bl	8001e08 <__swhatbuf_r>
 8001e74:	9900      	ldr	r1, [sp, #0]
 8001e76:	4605      	mov	r5, r0
 8001e78:	4630      	mov	r0, r6
 8001e7a:	f7ff faad 	bl	80013d8 <_malloc_r>
 8001e7e:	b948      	cbnz	r0, 8001e94 <__smakebuf_r+0x44>
 8001e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e84:	059a      	lsls	r2, r3, #22
 8001e86:	d4ef      	bmi.n	8001e68 <__smakebuf_r+0x18>
 8001e88:	f023 0303 	bic.w	r3, r3, #3
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	81a3      	strh	r3, [r4, #12]
 8001e92:	e7e3      	b.n	8001e5c <__smakebuf_r+0xc>
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <__smakebuf_r+0x7c>)
 8001e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e98:	89a3      	ldrh	r3, [r4, #12]
 8001e9a:	6020      	str	r0, [r4, #0]
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	81a3      	strh	r3, [r4, #12]
 8001ea2:	9b00      	ldr	r3, [sp, #0]
 8001ea4:	6163      	str	r3, [r4, #20]
 8001ea6:	9b01      	ldr	r3, [sp, #4]
 8001ea8:	6120      	str	r0, [r4, #16]
 8001eaa:	b15b      	cbz	r3, 8001ec4 <__smakebuf_r+0x74>
 8001eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f000 f881 	bl	8001fb8 <_isatty_r>
 8001eb6:	b128      	cbz	r0, 8001ec4 <__smakebuf_r+0x74>
 8001eb8:	89a3      	ldrh	r3, [r4, #12]
 8001eba:	f023 0303 	bic.w	r3, r3, #3
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	89a3      	ldrh	r3, [r4, #12]
 8001ec6:	431d      	orrs	r5, r3
 8001ec8:	81a5      	strh	r5, [r4, #12]
 8001eca:	e7cd      	b.n	8001e68 <__smakebuf_r+0x18>
 8001ecc:	0800128d 	.word	0x0800128d

08001ed0 <__malloc_lock>:
 8001ed0:	4770      	bx	lr

08001ed2 <__malloc_unlock>:
 8001ed2:	4770      	bx	lr

08001ed4 <_free_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	2900      	cmp	r1, #0
 8001eda:	d045      	beq.n	8001f68 <_free_r+0x94>
 8001edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee0:	1f0c      	subs	r4, r1, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bfb8      	it	lt
 8001ee6:	18e4      	addlt	r4, r4, r3
 8001ee8:	f7ff fff2 	bl	8001ed0 <__malloc_lock>
 8001eec:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <_free_r+0x98>)
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	b933      	cbnz	r3, 8001f02 <_free_r+0x2e>
 8001ef4:	6063      	str	r3, [r4, #4]
 8001ef6:	6014      	str	r4, [r2, #0]
 8001ef8:	4628      	mov	r0, r5
 8001efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001efe:	f7ff bfe8 	b.w	8001ed2 <__malloc_unlock>
 8001f02:	42a3      	cmp	r3, r4
 8001f04:	d90c      	bls.n	8001f20 <_free_r+0x4c>
 8001f06:	6821      	ldr	r1, [r4, #0]
 8001f08:	1862      	adds	r2, r4, r1
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	bf04      	itt	eq
 8001f0e:	681a      	ldreq	r2, [r3, #0]
 8001f10:	685b      	ldreq	r3, [r3, #4]
 8001f12:	6063      	str	r3, [r4, #4]
 8001f14:	bf04      	itt	eq
 8001f16:	1852      	addeq	r2, r2, r1
 8001f18:	6022      	streq	r2, [r4, #0]
 8001f1a:	6004      	str	r4, [r0, #0]
 8001f1c:	e7ec      	b.n	8001ef8 <_free_r+0x24>
 8001f1e:	4613      	mov	r3, r2
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	b10a      	cbz	r2, 8001f28 <_free_r+0x54>
 8001f24:	42a2      	cmp	r2, r4
 8001f26:	d9fa      	bls.n	8001f1e <_free_r+0x4a>
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	1858      	adds	r0, r3, r1
 8001f2c:	42a0      	cmp	r0, r4
 8001f2e:	d10b      	bne.n	8001f48 <_free_r+0x74>
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	4401      	add	r1, r0
 8001f34:	1858      	adds	r0, r3, r1
 8001f36:	4282      	cmp	r2, r0
 8001f38:	6019      	str	r1, [r3, #0]
 8001f3a:	d1dd      	bne.n	8001ef8 <_free_r+0x24>
 8001f3c:	6810      	ldr	r0, [r2, #0]
 8001f3e:	6852      	ldr	r2, [r2, #4]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	4401      	add	r1, r0
 8001f44:	6019      	str	r1, [r3, #0]
 8001f46:	e7d7      	b.n	8001ef8 <_free_r+0x24>
 8001f48:	d902      	bls.n	8001f50 <_free_r+0x7c>
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	602b      	str	r3, [r5, #0]
 8001f4e:	e7d3      	b.n	8001ef8 <_free_r+0x24>
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	1821      	adds	r1, r4, r0
 8001f54:	428a      	cmp	r2, r1
 8001f56:	bf04      	itt	eq
 8001f58:	6811      	ldreq	r1, [r2, #0]
 8001f5a:	6852      	ldreq	r2, [r2, #4]
 8001f5c:	6062      	str	r2, [r4, #4]
 8001f5e:	bf04      	itt	eq
 8001f60:	1809      	addeq	r1, r1, r0
 8001f62:	6021      	streq	r1, [r4, #0]
 8001f64:	605c      	str	r4, [r3, #4]
 8001f66:	e7c7      	b.n	8001ef8 <_free_r+0x24>
 8001f68:	bd38      	pop	{r3, r4, r5, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000008c 	.word	0x2000008c

08001f70 <_read_r>:
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	4c07      	ldr	r4, [pc, #28]	; (8001f90 <_read_r+0x20>)
 8001f74:	4605      	mov	r5, r0
 8001f76:	4608      	mov	r0, r1
 8001f78:	4611      	mov	r1, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	6022      	str	r2, [r4, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f000 f872 	bl	8002068 <_read>
 8001f84:	1c43      	adds	r3, r0, #1
 8001f86:	d102      	bne.n	8001f8e <_read_r+0x1e>
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	b103      	cbz	r3, 8001f8e <_read_r+0x1e>
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
 8001f90:	20000350 	.word	0x20000350

08001f94 <_fstat_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4c07      	ldr	r4, [pc, #28]	; (8001fb4 <_fstat_r+0x20>)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	f000 f964 	bl	800226e <_fstat>
 8001fa6:	1c43      	adds	r3, r0, #1
 8001fa8:	d102      	bne.n	8001fb0 <_fstat_r+0x1c>
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	b103      	cbz	r3, 8001fb0 <_fstat_r+0x1c>
 8001fae:	602b      	str	r3, [r5, #0]
 8001fb0:	bd38      	pop	{r3, r4, r5, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000350 	.word	0x20000350

08001fb8 <_isatty_r>:
 8001fb8:	b538      	push	{r3, r4, r5, lr}
 8001fba:	4c06      	ldr	r4, [pc, #24]	; (8001fd4 <_isatty_r+0x1c>)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	4605      	mov	r5, r0
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	6023      	str	r3, [r4, #0]
 8001fc4:	f000 f961 	bl	800228a <_isatty>
 8001fc8:	1c43      	adds	r3, r0, #1
 8001fca:	d102      	bne.n	8001fd2 <_isatty_r+0x1a>
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	b103      	cbz	r3, 8001fd2 <_isatty_r+0x1a>
 8001fd0:	602b      	str	r3, [r5, #0]
 8001fd2:	bd38      	pop	{r3, r4, r5, pc}
 8001fd4:	20000350 	.word	0x20000350

08001fd8 <findslot>:
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <findslot+0x2c>)
 8001fda:	b510      	push	{r4, lr}
 8001fdc:	4604      	mov	r4, r0
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	b118      	cbz	r0, 8001fea <findslot+0x12>
 8001fe2:	6983      	ldr	r3, [r0, #24]
 8001fe4:	b90b      	cbnz	r3, 8001fea <findslot+0x12>
 8001fe6:	f7ff f96d 	bl	80012c4 <__sinit>
 8001fea:	2c13      	cmp	r4, #19
 8001fec:	d807      	bhi.n	8001ffe <findslot+0x26>
 8001fee:	4806      	ldr	r0, [pc, #24]	; (8002008 <findslot+0x30>)
 8001ff0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	d002      	beq.n	8001ffe <findslot+0x26>
 8001ff8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	2000      	movs	r0, #0
 8002000:	e7fc      	b.n	8001ffc <findslot+0x24>
 8002002:	bf00      	nop
 8002004:	20000000 	.word	0x20000000
 8002008:	20000098 	.word	0x20000098

0800200c <checkerror>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	4605      	mov	r5, r0
 8002012:	d109      	bne.n	8002028 <checkerror+0x1c>
 8002014:	f000 f956 	bl	80022c4 <__errno>
 8002018:	2413      	movs	r4, #19
 800201a:	4606      	mov	r6, r0
 800201c:	2700      	movs	r7, #0
 800201e:	4620      	mov	r0, r4
 8002020:	4639      	mov	r1, r7
 8002022:	beab      	bkpt	0x00ab
 8002024:	4604      	mov	r4, r0
 8002026:	6034      	str	r4, [r6, #0]
 8002028:	4628      	mov	r0, r5
 800202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800202c <error>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	4605      	mov	r5, r0
 8002030:	f000 f948 	bl	80022c4 <__errno>
 8002034:	2413      	movs	r4, #19
 8002036:	4606      	mov	r6, r0
 8002038:	2700      	movs	r7, #0
 800203a:	4620      	mov	r0, r4
 800203c:	4639      	mov	r1, r7
 800203e:	beab      	bkpt	0x00ab
 8002040:	4604      	mov	r4, r0
 8002042:	6034      	str	r4, [r6, #0]
 8002044:	4628      	mov	r0, r5
 8002046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002048 <_swiread>:
 8002048:	b530      	push	{r4, r5, lr}
 800204a:	b085      	sub	sp, #20
 800204c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002050:	9203      	str	r2, [sp, #12]
 8002052:	2406      	movs	r4, #6
 8002054:	ad01      	add	r5, sp, #4
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	beab      	bkpt	0x00ab
 800205c:	4604      	mov	r4, r0
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff ffd4 	bl	800200c <checkerror>
 8002064:	b005      	add	sp, #20
 8002066:	bd30      	pop	{r4, r5, pc}

08002068 <_read>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	460e      	mov	r6, r1
 800206c:	4615      	mov	r5, r2
 800206e:	f7ff ffb3 	bl	8001fd8 <findslot>
 8002072:	4604      	mov	r4, r0
 8002074:	b930      	cbnz	r0, 8002084 <_read+0x1c>
 8002076:	f000 f925 	bl	80022c4 <__errno>
 800207a:	2309      	movs	r3, #9
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	f04f 30ff 	mov.w	r0, #4294967295
 8002082:	bd70      	pop	{r4, r5, r6, pc}
 8002084:	462a      	mov	r2, r5
 8002086:	4631      	mov	r1, r6
 8002088:	6800      	ldr	r0, [r0, #0]
 800208a:	f7ff ffdd 	bl	8002048 <_swiread>
 800208e:	1c43      	adds	r3, r0, #1
 8002090:	bf1f      	itttt	ne
 8002092:	6863      	ldrne	r3, [r4, #4]
 8002094:	1a28      	subne	r0, r5, r0
 8002096:	181b      	addne	r3, r3, r0
 8002098:	6063      	strne	r3, [r4, #4]
 800209a:	e7f2      	b.n	8002082 <_read+0x1a>

0800209c <_swilseek>:
 800209c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800209e:	460c      	mov	r4, r1
 80020a0:	4616      	mov	r6, r2
 80020a2:	f7ff ff99 	bl	8001fd8 <findslot>
 80020a6:	4605      	mov	r5, r0
 80020a8:	b940      	cbnz	r0, 80020bc <_swilseek+0x20>
 80020aa:	f000 f90b 	bl	80022c4 <__errno>
 80020ae:	2309      	movs	r3, #9
 80020b0:	6003      	str	r3, [r0, #0]
 80020b2:	f04f 34ff 	mov.w	r4, #4294967295
 80020b6:	4620      	mov	r0, r4
 80020b8:	b003      	add	sp, #12
 80020ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020bc:	2e02      	cmp	r6, #2
 80020be:	d903      	bls.n	80020c8 <_swilseek+0x2c>
 80020c0:	f000 f900 	bl	80022c4 <__errno>
 80020c4:	2316      	movs	r3, #22
 80020c6:	e7f3      	b.n	80020b0 <_swilseek+0x14>
 80020c8:	2e01      	cmp	r6, #1
 80020ca:	d112      	bne.n	80020f2 <_swilseek+0x56>
 80020cc:	6843      	ldr	r3, [r0, #4]
 80020ce:	18e4      	adds	r4, r4, r3
 80020d0:	d4f6      	bmi.n	80020c0 <_swilseek+0x24>
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	260a      	movs	r6, #10
 80020d6:	e9cd 3400 	strd	r3, r4, [sp]
 80020da:	466f      	mov	r7, sp
 80020dc:	4630      	mov	r0, r6
 80020de:	4639      	mov	r1, r7
 80020e0:	beab      	bkpt	0x00ab
 80020e2:	4606      	mov	r6, r0
 80020e4:	4630      	mov	r0, r6
 80020e6:	f7ff ff91 	bl	800200c <checkerror>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	dbe1      	blt.n	80020b2 <_swilseek+0x16>
 80020ee:	606c      	str	r4, [r5, #4]
 80020f0:	e7e1      	b.n	80020b6 <_swilseek+0x1a>
 80020f2:	2e02      	cmp	r6, #2
 80020f4:	d1ed      	bne.n	80020d2 <_swilseek+0x36>
 80020f6:	af02      	add	r7, sp, #8
 80020f8:	6803      	ldr	r3, [r0, #0]
 80020fa:	f847 3d08 	str.w	r3, [r7, #-8]!
 80020fe:	260c      	movs	r6, #12
 8002100:	4630      	mov	r0, r6
 8002102:	4639      	mov	r1, r7
 8002104:	beab      	bkpt	0x00ab
 8002106:	4606      	mov	r6, r0
 8002108:	4630      	mov	r0, r6
 800210a:	f7ff ff7f 	bl	800200c <checkerror>
 800210e:	1c43      	adds	r3, r0, #1
 8002110:	d0cf      	beq.n	80020b2 <_swilseek+0x16>
 8002112:	4404      	add	r4, r0
 8002114:	e7dd      	b.n	80020d2 <_swilseek+0x36>

08002116 <_lseek>:
 8002116:	f7ff bfc1 	b.w	800209c <_swilseek>

0800211a <_swiwrite>:
 800211a:	b530      	push	{r4, r5, lr}
 800211c:	b085      	sub	sp, #20
 800211e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002122:	9203      	str	r2, [sp, #12]
 8002124:	2405      	movs	r4, #5
 8002126:	ad01      	add	r5, sp, #4
 8002128:	4620      	mov	r0, r4
 800212a:	4629      	mov	r1, r5
 800212c:	beab      	bkpt	0x00ab
 800212e:	4604      	mov	r4, r0
 8002130:	4620      	mov	r0, r4
 8002132:	f7ff ff6b 	bl	800200c <checkerror>
 8002136:	b005      	add	sp, #20
 8002138:	bd30      	pop	{r4, r5, pc}

0800213a <_write>:
 800213a:	b570      	push	{r4, r5, r6, lr}
 800213c:	460e      	mov	r6, r1
 800213e:	4615      	mov	r5, r2
 8002140:	f7ff ff4a 	bl	8001fd8 <findslot>
 8002144:	4604      	mov	r4, r0
 8002146:	b930      	cbnz	r0, 8002156 <_write+0x1c>
 8002148:	f000 f8bc 	bl	80022c4 <__errno>
 800214c:	2309      	movs	r3, #9
 800214e:	6003      	str	r3, [r0, #0]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	bd70      	pop	{r4, r5, r6, pc}
 8002156:	462a      	mov	r2, r5
 8002158:	4631      	mov	r1, r6
 800215a:	6800      	ldr	r0, [r0, #0]
 800215c:	f7ff ffdd 	bl	800211a <_swiwrite>
 8002160:	1e02      	subs	r2, r0, #0
 8002162:	dbf5      	blt.n	8002150 <_write+0x16>
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	1aa8      	subs	r0, r5, r2
 8002168:	4403      	add	r3, r0
 800216a:	42aa      	cmp	r2, r5
 800216c:	6063      	str	r3, [r4, #4]
 800216e:	d1f1      	bne.n	8002154 <_write+0x1a>
 8002170:	2000      	movs	r0, #0
 8002172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002176:	f7ff bf59 	b.w	800202c <error>

0800217a <_swiclose>:
 800217a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800217c:	ad02      	add	r5, sp, #8
 800217e:	2402      	movs	r4, #2
 8002180:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	beab      	bkpt	0x00ab
 800218a:	4604      	mov	r4, r0
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ff3d 	bl	800200c <checkerror>
 8002192:	b003      	add	sp, #12
 8002194:	bd30      	pop	{r4, r5, pc}
	...

08002198 <_close>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4605      	mov	r5, r0
 800219c:	f7ff ff1c 	bl	8001fd8 <findslot>
 80021a0:	4604      	mov	r4, r0
 80021a2:	b930      	cbnz	r0, 80021b2 <_close+0x1a>
 80021a4:	f000 f88e 	bl	80022c4 <__errno>
 80021a8:	2309      	movs	r3, #9
 80021aa:	6003      	str	r3, [r0, #0]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	bd38      	pop	{r3, r4, r5, pc}
 80021b2:	3d01      	subs	r5, #1
 80021b4:	2d01      	cmp	r5, #1
 80021b6:	d809      	bhi.n	80021cc <_close+0x34>
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <_close+0x48>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d104      	bne.n	80021cc <_close+0x34>
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295
 80021c6:	6003      	str	r3, [r0, #0]
 80021c8:	2000      	movs	r0, #0
 80021ca:	e7f1      	b.n	80021b0 <_close+0x18>
 80021cc:	6820      	ldr	r0, [r4, #0]
 80021ce:	f7ff ffd4 	bl	800217a <_swiclose>
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d1ec      	bne.n	80021b0 <_close+0x18>
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	6023      	str	r3, [r4, #0]
 80021dc:	e7e8      	b.n	80021b0 <_close+0x18>
 80021de:	bf00      	nop
 80021e0:	20000098 	.word	0x20000098

080021e4 <_sbrk>:
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <_sbrk+0x38>)
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4602      	mov	r2, r0
 80021ec:	b909      	cbnz	r1, 80021f2 <_sbrk+0xe>
 80021ee:	490c      	ldr	r1, [pc, #48]	; (8002220 <_sbrk+0x3c>)
 80021f0:	6019      	str	r1, [r3, #0]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	4669      	mov	r1, sp
 80021f6:	4402      	add	r2, r0
 80021f8:	428a      	cmp	r2, r1
 80021fa:	d806      	bhi.n	800220a <_sbrk+0x26>
 80021fc:	4909      	ldr	r1, [pc, #36]	; (8002224 <_sbrk+0x40>)
 80021fe:	4c0a      	ldr	r4, [pc, #40]	; (8002228 <_sbrk+0x44>)
 8002200:	6809      	ldr	r1, [r1, #0]
 8002202:	42a1      	cmp	r1, r4
 8002204:	d008      	beq.n	8002218 <_sbrk+0x34>
 8002206:	428a      	cmp	r2, r1
 8002208:	d906      	bls.n	8002218 <_sbrk+0x34>
 800220a:	f000 f85b 	bl	80022c4 <__errno>
 800220e:	230c      	movs	r3, #12
 8002210:	6003      	str	r3, [r0, #0]
 8002212:	f04f 30ff 	mov.w	r0, #4294967295
 8002216:	bd10      	pop	{r4, pc}
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e7fc      	b.n	8002216 <_sbrk+0x32>
 800221c:	20000094 	.word	0x20000094
 8002220:	20000358 	.word	0x20000358
 8002224:	20000064 	.word	0x20000064
 8002228:	cafedead 	.word	0xcafedead

0800222c <_swistat>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	460c      	mov	r4, r1
 8002230:	f7ff fed2 	bl	8001fd8 <findslot>
 8002234:	4606      	mov	r6, r0
 8002236:	b930      	cbnz	r0, 8002246 <_swistat+0x1a>
 8002238:	f000 f844 	bl	80022c4 <__errno>
 800223c:	2309      	movs	r3, #9
 800223e:	6003      	str	r3, [r0, #0]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	bd70      	pop	{r4, r5, r6, pc}
 8002246:	6863      	ldr	r3, [r4, #4]
 8002248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800224c:	6063      	str	r3, [r4, #4]
 800224e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002252:	6463      	str	r3, [r4, #68]	; 0x44
 8002254:	250c      	movs	r5, #12
 8002256:	4628      	mov	r0, r5
 8002258:	4631      	mov	r1, r6
 800225a:	beab      	bkpt	0x00ab
 800225c:	4605      	mov	r5, r0
 800225e:	4628      	mov	r0, r5
 8002260:	f7ff fed4 	bl	800200c <checkerror>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	bf1c      	itt	ne
 8002268:	6120      	strne	r0, [r4, #16]
 800226a:	2000      	movne	r0, #0
 800226c:	e7ea      	b.n	8002244 <_swistat+0x18>

0800226e <_fstat>:
 800226e:	460b      	mov	r3, r1
 8002270:	b510      	push	{r4, lr}
 8002272:	2100      	movs	r1, #0
 8002274:	4604      	mov	r4, r0
 8002276:	2258      	movs	r2, #88	; 0x58
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe ffc3 	bl	8001204 <memset>
 800227e:	4601      	mov	r1, r0
 8002280:	4620      	mov	r0, r4
 8002282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002286:	f7ff bfd1 	b.w	800222c <_swistat>

0800228a <_isatty>:
 800228a:	b570      	push	{r4, r5, r6, lr}
 800228c:	f7ff fea4 	bl	8001fd8 <findslot>
 8002290:	2509      	movs	r5, #9
 8002292:	4604      	mov	r4, r0
 8002294:	b920      	cbnz	r0, 80022a0 <_isatty+0x16>
 8002296:	f000 f815 	bl	80022c4 <__errno>
 800229a:	6005      	str	r5, [r0, #0]
 800229c:	4620      	mov	r0, r4
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	4628      	mov	r0, r5
 80022a2:	4621      	mov	r1, r4
 80022a4:	beab      	bkpt	0x00ab
 80022a6:	4604      	mov	r4, r0
 80022a8:	2c01      	cmp	r4, #1
 80022aa:	d0f7      	beq.n	800229c <_isatty+0x12>
 80022ac:	f000 f80a 	bl	80022c4 <__errno>
 80022b0:	2400      	movs	r4, #0
 80022b2:	4606      	mov	r6, r0
 80022b4:	2513      	movs	r5, #19
 80022b6:	4628      	mov	r0, r5
 80022b8:	4621      	mov	r1, r4
 80022ba:	beab      	bkpt	0x00ab
 80022bc:	4605      	mov	r5, r0
 80022be:	6035      	str	r5, [r6, #0]
 80022c0:	e7ec      	b.n	800229c <_isatty+0x12>
	...

080022c4 <__errno>:
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <__errno+0x8>)
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000000 	.word	0x20000000

080022d0 <_init>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr

080022dc <_fini>:
 80022dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022de:	bf00      	nop
 80022e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e2:	bc08      	pop	{r3}
 80022e4:	469e      	mov	lr, r3
 80022e6:	4770      	bx	lr
