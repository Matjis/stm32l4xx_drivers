
stm32l4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a84  08000a84  00010a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a90  08000a90  00010a98  2**0
                  CONTENTS
  4 .ARM          00000000  08000a90  08000a90  00010a98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a90  08000a98  00010a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a90  08000a90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a94  08000a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a98  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000196d  00000000  00000000  00010ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000433  00000000  00000000  00012435  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000130  00000000  00000000  00012868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f8  00000000  00000000  00012998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000248d  00000000  00000000  00012a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001214  00000000  00000000  00014f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a36f  00000000  00000000  00016131  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000404  00000000  00000000  0002051c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a6c 	.word	0x08000a6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a6c 	.word	0x08000a6c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInits>:
//		SCK -> PB10 AF5
//		MISO -> PB14 AF5
//		MOSI -> PB15 AF5


void SPI2_GPIOInits(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <SPI2_GPIOInits+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80001ea:	2302      	movs	r3, #2
 80001ec:	72bb      	strb	r3, [r7, #10]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ee:	2300      	movs	r3, #0
 80001f0:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001f2:	2300      	movs	r3, #0
 80001f4:	72fb      	strb	r3, [r7, #11]

	// Init SCL - clock pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 10;
 80001f6:	230a      	movs	r3, #10
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f8f7 	bl	80003f0 <GPIO_Init>

	// Init MISO pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 14;
 8000202:	230e      	movs	r3, #14
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f8f1 	bl	80003f0 <GPIO_Init>

	// Init MOSI pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 15;
 800020e:	230f      	movs	r3, #15
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f8eb 	bl	80003f0 <GPIO_Init>

	// Init NSS pin for SPI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = 9;
 800021a:	2309      	movs	r3, #9
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f8e5 	bl	80003f0 <GPIO_Init>

}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	48000400 	.word	0x48000400

08000234 <SPI2_Inits>:

void SPI2_Inits(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SPI2_Inits+0x38>)
 800023c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_CRCL = SPI_CRCN_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // software slave managment for NSS enabled
 8000256:	2301      	movs	r3, #1
 8000258:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fb43 	bl	80008e8 <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <main>:


int main(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

	char user_data[] = "Hello world";
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <main+0x38>)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	ca07      	ldmia	r2, {r0, r1, r2}
 800027c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this funcktion is needed to set up and initialize SPI2 GPIO pins
	SPI2_GPIOInits();
 8000280:	f7ff ffaa 	bl	80001d8 <SPI2_GPIOInits>

	//this funcktion is needed to set up and initialize SPI2 peripheral parameters
	SPI2_Inits();
 8000284:	f7ff ffd6 	bl	8000234 <SPI2_Inits>

	//enable SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 8000288:	2101      	movs	r1, #1
 800028a:	4808      	ldr	r0, [pc, #32]	; (80002ac <main+0x3c>)
 800028c:	f000 fad8 	bl	8000840 <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2, (uint8_t* )user_data, strlen(user_data) );
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff98 	bl	80001c8 <strlen>
 8000298:	4602      	mov	r2, r0
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	4803      	ldr	r0, [pc, #12]	; (80002ac <main+0x3c>)
 80002a0:	f000 fb8a 	bl	80009b8 <SPI_SendData>

	while(1);
 80002a4:	e7fe      	b.n	80002a4 <main+0x34>
 80002a6:	bf00      	nop
 80002a8:	08000a84 	.word	0x08000a84
 80002ac:	40003800 	.word	0x40003800

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	; (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	; (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fba1 	bl	8000a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffc5 	bl	8000270 <main>

080002e6 <LoopForever>:

LoopForever:
    b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	08000a98 	.word	0x08000a98
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC1_2_IRQHandler>
	...

08000304 <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d156      	bne.n	80003c4 <GPIO_PeriClockControl+0xc0>
		if(pGPIOx == GPIOA){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800031e:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a2b      	ldr	r2, [pc, #172]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
		}
		else if(pGPIOx == GPIOH){
			GPIOH_PCLK_EN();
		}
	}
}
 800032a:	e04b      	b.n	80003c4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOB){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a29      	ldr	r2, [pc, #164]	; (80003d4 <GPIO_PeriClockControl+0xd0>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000334:	4b26      	ldr	r3, [pc, #152]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000338:	4a25      	ldr	r2, [pc, #148]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000340:	e040      	b.n	80003c4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOC){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <GPIO_PeriClockControl+0xd4>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034a:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	4a20      	ldr	r2, [pc, #128]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000356:	e035      	b.n	80003c4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOD){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a20      	ldr	r2, [pc, #128]	; (80003dc <GPIO_PeriClockControl+0xd8>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000364:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800036c:	e02a      	b.n	80003c4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOE){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <GPIO_PeriClockControl+0xdc>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000376:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000382:	e01f      	b.n	80003c4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOF){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <GPIO_PeriClockControl+0xe0>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800038c:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 800038e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000390:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8000398:	e014      	b.n	80003c4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOG){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <GPIO_PeriClockControl+0xe4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 80003a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ac:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80003ae:	e009      	b.n	80003c4 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOH){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <GPIO_PeriClockControl+0xe8>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d105      	bne.n	80003c4 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <GPIO_PeriClockControl+0xcc>)
 80003be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003c2:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	48000400 	.word	0x48000400
 80003d8:	48000800 	.word	0x48000800
 80003dc:	48000c00 	.word	0x48000c00
 80003e0:	48001000 	.word	0x48001000
 80003e4:	48001400 	.word	0x48001400
 80003e8:	48001800 	.word	0x48001800
 80003ec:	48001c00 	.word	0x48001c00

080003f0 <GPIO_Init>:


//Init and De-Init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	uint32_t temp=0; // temp register
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]

	// Enable peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff7e 	bl	8000304 <GPIO_PeriClockControl>

	// 1) configure the input mode

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	795b      	ldrb	r3, [r3, #5]
 800040c:	2b03      	cmp	r3, #3
 800040e:	d822      	bhi.n	8000456 <GPIO_Init+0x66>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	795b      	ldrb	r3, [r3, #5]
 8000414:	461a      	mov	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	791b      	ldrb	r3, [r3, #4]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	2103      	movs	r1, #3
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	4619      	mov	r1, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	400a      	ands	r2, r1
 800043e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting register
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	6819      	ldr	r1, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	e140      	b.n	80006d8 <GPIO_Init+0x2e8>
	}
	else{
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	2103      	movs	r1, #3
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	4619      	mov	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	400a      	ands	r2, r1
 8000472:	601a      	str	r2, [r3, #0]
		//pGPIOHandle->pGPIOx->MODER |= ( 0x0 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // setting register


		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 32;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	791b      	ldrb	r3, [r3, #4]
 8000478:	f003 031f 	and.w	r3, r3, #31
 800047c:	60fb      	str	r3, [r7, #12]

		//interupt config part

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	795b      	ldrb	r3, [r3, #5]
 8000482:	2b04      	cmp	r3, #4
 8000484:	d133      	bne.n	80004ee <GPIO_Init+0xfe>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	2b1f      	cmp	r3, #31
 800048c:	d817      	bhi.n	80004be <GPIO_Init+0xce>
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 800048e:	4b82      	ldr	r3, [pc, #520]	; (8000698 <GPIO_Init+0x2a8>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	2101      	movs	r1, #1
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	fa01 f202 	lsl.w	r2, r1, r2
 800049a:	4611      	mov	r1, r2
 800049c:	4a7e      	ldr	r2, [pc, #504]	; (8000698 <GPIO_Init+0x2a8>)
 800049e:	430b      	orrs	r3, r1
 80004a0:	60d3      	str	r3, [r2, #12]

				//clear the corresponding RTSR bit
				EXTI->RTSR1 &= ~(1 << temp);
 80004a2:	4b7d      	ldr	r3, [pc, #500]	; (8000698 <GPIO_Init+0x2a8>)
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	2101      	movs	r1, #1
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	43d2      	mvns	r2, r2
 80004b0:	4611      	mov	r1, r2
 80004b2:	4a79      	ldr	r2, [pc, #484]	; (8000698 <GPIO_Init+0x2a8>)
 80004b4:	400b      	ands	r3, r1
 80004b6:	6093      	str	r3, [r2, #8]

				temp = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	e084      	b.n	80005c8 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure the FTSR - falling trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 80004be:	4b76      	ldr	r3, [pc, #472]	; (8000698 <GPIO_Init+0x2a8>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	2101      	movs	r1, #1
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a72      	ldr	r2, [pc, #456]	; (8000698 <GPIO_Init+0x2a8>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6253      	str	r3, [r2, #36]	; 0x24

				//clear the corresponding RTSR bit
				EXTI->RTSR2 &= ~(1 << temp);
 80004d2:	4b71      	ldr	r3, [pc, #452]	; (8000698 <GPIO_Init+0x2a8>)
 80004d4:	6a1b      	ldr	r3, [r3, #32]
 80004d6:	2101      	movs	r1, #1
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	fa01 f202 	lsl.w	r2, r1, r2
 80004de:	43d2      	mvns	r2, r2
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a6d      	ldr	r2, [pc, #436]	; (8000698 <GPIO_Init+0x2a8>)
 80004e4:	400b      	ands	r3, r1
 80004e6:	6213      	str	r3, [r2, #32]

				temp = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	e06c      	b.n	80005c8 <GPIO_Init+0x1d8>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	2b05      	cmp	r3, #5
 80004f4:	d133      	bne.n	800055e <GPIO_Init+0x16e>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	2b1f      	cmp	r3, #31
 80004fc:	d817      	bhi.n	800052e <GPIO_Init+0x13e>
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR1 |= (1 << temp);
 80004fe:	4b66      	ldr	r3, [pc, #408]	; (8000698 <GPIO_Init+0x2a8>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	2101      	movs	r1, #1
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a62      	ldr	r2, [pc, #392]	; (8000698 <GPIO_Init+0x2a8>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6093      	str	r3, [r2, #8]

				//clear the corresponding RTSR bit
				EXTI->FTSR1 &= ~(1 << temp);
 8000512:	4b61      	ldr	r3, [pc, #388]	; (8000698 <GPIO_Init+0x2a8>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	2101      	movs	r1, #1
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	fa01 f202 	lsl.w	r2, r1, r2
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a5d      	ldr	r2, [pc, #372]	; (8000698 <GPIO_Init+0x2a8>)
 8000524:	400b      	ands	r3, r1
 8000526:	60d3      	str	r3, [r2, #12]

				temp = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e04c      	b.n	80005c8 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure the RTSR - rising trigger selection register
				EXTI->RTSR2 |= (1 << temp);
 800052e:	4b5a      	ldr	r3, [pc, #360]	; (8000698 <GPIO_Init+0x2a8>)
 8000530:	6a1b      	ldr	r3, [r3, #32]
 8000532:	2101      	movs	r1, #1
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a56      	ldr	r2, [pc, #344]	; (8000698 <GPIO_Init+0x2a8>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6213      	str	r3, [r2, #32]

				//clear the corresponding RTSR bit
				EXTI->FTSR2 &= ~(1 << temp);
 8000542:	4b55      	ldr	r3, [pc, #340]	; (8000698 <GPIO_Init+0x2a8>)
 8000544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000546:	2101      	movs	r1, #1
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	43d2      	mvns	r2, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a51      	ldr	r2, [pc, #324]	; (8000698 <GPIO_Init+0x2a8>)
 8000554:	400b      	ands	r3, r1
 8000556:	6253      	str	r3, [r2, #36]	; 0x24

				temp = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e034      	b.n	80005c8 <GPIO_Init+0x1d8>
			}
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	2b06      	cmp	r3, #6
 8000564:	d130      	bne.n	80005c8 <GPIO_Init+0x1d8>
			if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	2b1f      	cmp	r3, #31
 800056c:	d816      	bhi.n	800059c <GPIO_Init+0x1ac>
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR1 |= (1 << temp);
 800056e:	4b4a      	ldr	r3, [pc, #296]	; (8000698 <GPIO_Init+0x2a8>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	2101      	movs	r1, #1
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a46      	ldr	r2, [pc, #280]	; (8000698 <GPIO_Init+0x2a8>)
 800057e:	430b      	orrs	r3, r1
 8000580:	60d3      	str	r3, [r2, #12]
				EXTI->RTSR1 |= (1 << temp);
 8000582:	4b45      	ldr	r3, [pc, #276]	; (8000698 <GPIO_Init+0x2a8>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	2101      	movs	r1, #1
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	4611      	mov	r1, r2
 8000590:	4a41      	ldr	r2, [pc, #260]	; (8000698 <GPIO_Init+0x2a8>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6093      	str	r3, [r2, #8]

				temp = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e015      	b.n	80005c8 <GPIO_Init+0x1d8>
			}
			else{
				//1. configure both FTSR and RTSR - falling and rising trigger selection register
				EXTI->FTSR2 |= (1 << temp);
 800059c:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <GPIO_Init+0x2a8>)
 800059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a0:	2101      	movs	r1, #1
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a3b      	ldr	r2, [pc, #236]	; (8000698 <GPIO_Init+0x2a8>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	6253      	str	r3, [r2, #36]	; 0x24
				EXTI->RTSR2 |= (1 << temp);
 80005b0:	4b39      	ldr	r3, [pc, #228]	; (8000698 <GPIO_Init+0x2a8>)
 80005b2:	6a1b      	ldr	r3, [r3, #32]
 80005b4:	2101      	movs	r1, #1
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a36      	ldr	r2, [pc, #216]	; (8000698 <GPIO_Init+0x2a8>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6213      	str	r3, [r2, #32]

				temp = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
		}


		 //2. configure the GPIO port selection in SYSCFG_EXTICR

		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	72bb      	strb	r3, [r7, #10]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005e2:	d032      	beq.n	800064a <GPIO_Init+0x25a>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a2c      	ldr	r2, [pc, #176]	; (800069c <GPIO_Init+0x2ac>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d02b      	beq.n	8000646 <GPIO_Init+0x256>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <GPIO_Init+0x2b0>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d024      	beq.n	8000642 <GPIO_Init+0x252>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a29      	ldr	r2, [pc, #164]	; (80006a4 <GPIO_Init+0x2b4>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d01d      	beq.n	800063e <GPIO_Init+0x24e>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <GPIO_Init+0x2b8>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d016      	beq.n	800063a <GPIO_Init+0x24a>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a26      	ldr	r2, [pc, #152]	; (80006ac <GPIO_Init+0x2bc>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d00f      	beq.n	8000636 <GPIO_Init+0x246>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <GPIO_Init+0x2c0>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d008      	beq.n	8000632 <GPIO_Init+0x242>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <GPIO_Init+0x2c4>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d101      	bne.n	800062e <GPIO_Init+0x23e>
 800062a:	2307      	movs	r3, #7
 800062c:	e00e      	b.n	800064c <GPIO_Init+0x25c>
 800062e:	2300      	movs	r3, #0
 8000630:	e00c      	b.n	800064c <GPIO_Init+0x25c>
 8000632:	2306      	movs	r3, #6
 8000634:	e00a      	b.n	800064c <GPIO_Init+0x25c>
 8000636:	2305      	movs	r3, #5
 8000638:	e008      	b.n	800064c <GPIO_Init+0x25c>
 800063a:	2304      	movs	r3, #4
 800063c:	e006      	b.n	800064c <GPIO_Init+0x25c>
 800063e:	2303      	movs	r3, #3
 8000640:	e004      	b.n	800064c <GPIO_Init+0x25c>
 8000642:	2302      	movs	r3, #2
 8000644:	e002      	b.n	800064c <GPIO_Init+0x25c>
 8000646:	2301      	movs	r3, #1
 8000648:	e000      	b.n	800064c <GPIO_Init+0x25c>
 800064a:	2300      	movs	r3, #0
 800064c:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <GPIO_Init+0x2c8>)
 8000650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000652:	4a19      	ldr	r2, [pc, #100]	; (80006b8 <GPIO_Init+0x2c8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6613      	str	r3, [r2, #96]	; 0x60
		SYSCFG->EXTICR[temp1] = portCode << ( temp2 * 4);
 800065a:	7a7a      	ldrb	r2, [r7, #9]
 800065c:	7abb      	ldrb	r3, [r7, #10]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	fa02 f103 	lsl.w	r1, r2, r3
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <GPIO_Init+0x2cc>)
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	3302      	adds	r3, #2
 800066a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		//3. enable the exti interrupt delivery using IMR - interrupt mask register

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %32;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	f003 031f 	and.w	r3, r3, #31
 8000676:	60fb      	str	r3, [r7, #12]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 32){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	2b1f      	cmp	r3, #31
 800067e:	d81f      	bhi.n	80006c0 <GPIO_Init+0x2d0>
			EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <GPIO_Init+0x2a8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	7912      	ldrb	r2, [r2, #4]
 8000688:	4611      	mov	r1, r2
 800068a:	2201      	movs	r2, #1
 800068c:	408a      	lsls	r2, r1
 800068e:	4611      	mov	r1, r2
 8000690:	4a01      	ldr	r2, [pc, #4]	; (8000698 <GPIO_Init+0x2a8>)
 8000692:	430b      	orrs	r3, r1
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	e01d      	b.n	80006d4 <GPIO_Init+0x2e4>
 8000698:	40010400 	.word	0x40010400
 800069c:	48000400 	.word	0x48000400
 80006a0:	48000800 	.word	0x48000800
 80006a4:	48000c00 	.word	0x48000c00
 80006a8:	48001000 	.word	0x48001000
 80006ac:	48001400 	.word	0x48001400
 80006b0:	48001800 	.word	0x48001800
 80006b4:	48001c00 	.word	0x48001c00
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010000 	.word	0x40010000
		}
		else{
			EXTI->IMR2 |= 1 << temp;
 80006c0:	4b5e      	ldr	r3, [pc, #376]	; (800083c <GPIO_Init+0x44c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	2101      	movs	r1, #1
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	fa01 f202 	lsl.w	r2, r1, r2
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a5b      	ldr	r2, [pc, #364]	; (800083c <GPIO_Init+0x44c>)
 80006d0:	430b      	orrs	r3, r1
 80006d2:	6193      	str	r3, [r2, #24]
		}

		temp = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
	}

	// 2) configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	799b      	ldrb	r3, [r3, #6]
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2103      	movs	r1, #3
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	400a      	ands	r2, r1
 8000706:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // setting register
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6899      	ldr	r1, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	430a      	orrs	r2, r1
 8000716:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]

	// 3) configure the pupd settings

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // multiplication by 2 for pin number means that mode register is 2 bit in size
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	791b      	ldrb	r3, [r3, #4]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // clearing register
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	2103      	movs	r1, #3
 800073c:	fa01 f303 	lsl.w	r3, r1, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	400a      	ands	r2, r1
 800074a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // setting register
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68d9      	ldr	r1, [r3, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	430a      	orrs	r2, r1
 800075a:	60da      	str	r2, [r3, #12]

	temp = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]

	// 4) configure the out put type - optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	7a1b      	ldrb	r3, [r3, #8]
 8000764:	461a      	mov	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing register
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	4619      	mov	r1, r3
 800077c:	2301      	movs	r3, #1
 800077e:	408b      	lsls	r3, r1
 8000780:	43db      	mvns	r3, r3
 8000782:	4619      	mov	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	400a      	ands	r2, r1
 800078a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; // setting register
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6859      	ldr	r1, [r3, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	430a      	orrs	r2, r1
 800079a:	605a      	str	r2, [r3, #4]

	temp = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]

	// 5) configure the alt functionality

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d145      	bne.n	8000834 <GPIO_Init+0x444>

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	f003 0307 	and.w	r3, r3, #7
 80007b0:	60fb      	str	r3, [r7, #12]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	791b      	ldrb	r3, [r3, #4]
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	d81d      	bhi.n	80007f6 <GPIO_Init+0x406>
			pGPIOHandle->pGPIOx->AFRL &= ~( 0xF << (4 * temp)); // clearing register
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a1a      	ldr	r2, [r3, #32]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	210f      	movs	r1, #15
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	400a      	ands	r2, r1
 80007d4:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6a1a      	ldr	r2, [r3, #32]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7a5b      	ldrb	r3, [r3, #9]
 80007e0:	4619      	mov	r1, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	430a      	orrs	r2, r1
 80007f2:	621a      	str	r2, [r3, #32]
 80007f4:	e01c      	b.n	8000830 <GPIO_Init+0x440>
		}
		else{
			pGPIOHandle->pGPIOx->AFRH &= ~( 0xF << (4 * temp)); // clearing register
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	210f      	movs	r1, #15
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	4619      	mov	r1, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	400a      	ands	r2, r1
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp) ); // setting register
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7a5b      	ldrb	r3, [r3, #9]
 800081c:	4619      	mov	r1, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	430a      	orrs	r2, r1
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
		}

		temp = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
	}
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010400 	.word	0x40010400

08000840 <SPI_PeripheralControl>:
		}
	}

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d106      	bne.n	8000860 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= ( 1 << SPI_CR1_SPE);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE);
	}

}
 800085e:	e005      	b.n	800086c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	601a      	str	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SPI_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d11f      	bne.n	80008ca <SPI_PeriClockControl+0x52>
		if(pSPIx == SPI1){
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <SPI_PeriClockControl+0x60>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <SPI_PeriClockControl+0x64>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	4a11      	ldr	r2, [pc, #68]	; (80008dc <SPI_PeriClockControl+0x64>)
 8000898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800089c:	6613      	str	r3, [r2, #96]	; 0x60
		}
		else if(pSPIx == SPI3){
			SPI3_PCLK_EN();
		}
	}
}
 800089e:	e014      	b.n	80008ca <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI2){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <SPI_PeriClockControl+0x68>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <SPI_PeriClockControl+0x64>)
 80008aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ac:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <SPI_PeriClockControl+0x64>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6593      	str	r3, [r2, #88]	; 0x58
}
 80008b4:	e009      	b.n	80008ca <SPI_PeriClockControl+0x52>
		else if(pSPIx == SPI3){
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <SPI_PeriClockControl+0x6c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d105      	bne.n	80008ca <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <SPI_PeriClockControl+0x64>)
 80008c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c2:	4a06      	ldr	r2, [pc, #24]	; (80008dc <SPI_PeriClockControl+0x64>)
 80008c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008c8:	6593      	str	r3, [r2, #88]	; 0x58
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40013000 	.word	0x40013000
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40003800 	.word	0x40003800
 80008e4:	40003c00 	.word	0x40003c00

080008e8 <SPI_Init>:


//Init and De-Init
void SPI_Init(SPI_Handle_t *pSPIHandle){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

		// Enable peripheral clock

		SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2101      	movs	r1, #1
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffbe 	bl	8000878 <SPI_PeriClockControl>

		// first configure the SPI_CR1 reg

		uint32_t tempreg = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]

		// 1. configure the device mode
		tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]

		// 2. configure the bus config
		if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	795b      	ldrb	r3, [r3, #5]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d104      	bne.n	8000920 <SPI_Init+0x38>
			//BIDI mode should be cleared
			tempreg &= ~( 1 << 15);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e014      	b.n	800094a <SPI_Init+0x62>
		}
		else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	795b      	ldrb	r3, [r3, #5]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d104      	bne.n	8000932 <SPI_Init+0x4a>
			//BIDI mode should be set
			tempreg |= ( 1 << 15);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e00b      	b.n	800094a <SPI_Init+0x62>
		}
		else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	795b      	ldrb	r3, [r3, #5]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d107      	bne.n	800094a <SPI_Init+0x62>
			//BIDI mode should be cleared
			tempreg &= ~( 1 << 15);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000940:	60fb      	str	r3, [r7, #12]
			//RXONLY bit must be set
			tempreg |= ( 1 << 10);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000948:	60fb      	str	r3, [r7, #12]
		}

		// 3. configure the SPI serial clock speed (baud rate)
		tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	799b      	ldrb	r3, [r3, #6]
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	461a      	mov	r2, r3
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	4313      	orrs	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

		// 4. configure the DFF
		tempreg |= pSPIHandle->SPIConfig.SPI_CRCL << SPI_CR1_CRCL;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	79db      	ldrb	r3, [r3, #7]
 800095c:	02db      	lsls	r3, r3, #11
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4313      	orrs	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]

		// 5. configure the CPOL
		tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7a1b      	ldrb	r3, [r3, #8]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	461a      	mov	r2, r3
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]

		// 6. configure the CPHA
		tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a5b      	ldrb	r3, [r3, #9]
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

		// all the necessary bits are set in the CR1 register
		pSPIHandle->pSPIx->CR1 = tempreg;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <SPI_GetFlagStatus>:
		else if(pSPIx == SPI3){
			SPI3_REG_RESET();
		}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SPI_SendData>:

//Data read and write - THIS IS BLOCKING CALL
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Len){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]

		while(Len > 0){
 80009c4:	e027      	b.n	8000a16 <SPI_SendData+0x5e>

			// 1. wait until TXE is set
			while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80009c6:	bf00      	nop
 80009c8:	2102      	movs	r1, #2
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f7ff ffe0 	bl	8000990 <SPI_GetFlagStatus>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f8      	beq.n	80009c8 <SPI_SendData+0x10>

			// 2. check the DFF bit
			if(pSPIx->CR1 & ( 1 << SPI_CR1_CRCL ) ){
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d00e      	beq.n	8000a00 <SPI_SendData+0x48>
				// 16 bit CRCL

				// 1. load the data in to the DR
				pSPIx->DR = *( (uint16_t*) pTXBuffer);
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	60da      	str	r2, [r3, #12]

				Len--;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
				Len--;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	607b      	str	r3, [r7, #4]

				(uint16_t*) pTXBuffer++;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	e00a      	b.n	8000a16 <SPI_SendData+0x5e>
			}
			else{
				// 8 bit CRCL

				// 1. load the data in to the DR
				pSPIx->DR = *pTXBuffer;
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	60da      	str	r2, [r3, #12]

				Len--;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]

				 pTXBuffer++;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
		while(Len > 0){
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1d4      	bne.n	80009c6 <SPI_SendData+0xe>
			}
		}
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <__libc_init_array>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4e0d      	ldr	r6, [pc, #52]	; (8000a5c <__libc_init_array+0x38>)
 8000a28:	4c0d      	ldr	r4, [pc, #52]	; (8000a60 <__libc_init_array+0x3c>)
 8000a2a:	1ba4      	subs	r4, r4, r6
 8000a2c:	10a4      	asrs	r4, r4, #2
 8000a2e:	2500      	movs	r5, #0
 8000a30:	42a5      	cmp	r5, r4
 8000a32:	d109      	bne.n	8000a48 <__libc_init_array+0x24>
 8000a34:	4e0b      	ldr	r6, [pc, #44]	; (8000a64 <__libc_init_array+0x40>)
 8000a36:	4c0c      	ldr	r4, [pc, #48]	; (8000a68 <__libc_init_array+0x44>)
 8000a38:	f000 f818 	bl	8000a6c <_init>
 8000a3c:	1ba4      	subs	r4, r4, r6
 8000a3e:	10a4      	asrs	r4, r4, #2
 8000a40:	2500      	movs	r5, #0
 8000a42:	42a5      	cmp	r5, r4
 8000a44:	d105      	bne.n	8000a52 <__libc_init_array+0x2e>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a4c:	4798      	blx	r3
 8000a4e:	3501      	adds	r5, #1
 8000a50:	e7ee      	b.n	8000a30 <__libc_init_array+0xc>
 8000a52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a56:	4798      	blx	r3
 8000a58:	3501      	adds	r5, #1
 8000a5a:	e7f2      	b.n	8000a42 <__libc_init_array+0x1e>
 8000a5c:	08000a90 	.word	0x08000a90
 8000a60:	08000a90 	.word	0x08000a90
 8000a64:	08000a90 	.word	0x08000a90
 8000a68:	08000a94 	.word	0x08000a94

08000a6c <_init>:
 8000a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6e:	bf00      	nop
 8000a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a72:	bc08      	pop	{r3}
 8000a74:	469e      	mov	lr, r3
 8000a76:	4770      	bx	lr

08000a78 <_fini>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	bf00      	nop
 8000a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a7e:	bc08      	pop	{r3}
 8000a80:	469e      	mov	lr, r3
 8000a82:	4770      	bx	lr
